/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: .\mt5api.i

#ifndef SWIG_mt5api_WRAP_H_
#define SWIG_mt5api_WRAP_H_

class Swig_memory;

class SwigDirector_IMTManagerSink : public IMTManagerSink
{
 public:
  SwigDirector_IMTManagerSink(int swig_p);
  void _swig_upcall_OnDisconnect() {
    IMTManagerSink::OnDisconnect();
  }
  virtual void OnDisconnect();
  void _swig_upcall_OnTradeAccountSet(MTAPIRES const arg0,INT64 const arg1,IMTUser const *arg2,IMTAccount const *arg3,IMTOrderArray const *arg4,IMTPositionArray const *arg5) {
    IMTManagerSink::OnTradeAccountSet(arg0,arg1,arg2,arg3,arg4,arg5);
  }
  virtual void OnTradeAccountSet(MTAPIRES const arg0,INT64 const arg1,IMTUser const *arg2,IMTAccount const *arg3,IMTOrderArray const *arg4,IMTPositionArray const *arg5);
  void _swig_upcall_OnConnect() {
    IMTManagerSink::OnConnect();
  }
  virtual void OnConnect();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTDealerSink : public IMTDealerSink
{
 public:
  SwigDirector_IMTDealerSink(int swig_p);
  void _swig_upcall_OnDealerResult(IMTConfirm const *arg0) {
    IMTDealerSink::OnDealerResult(arg0);
  }
  virtual void OnDealerResult(IMTConfirm const *arg0);
  void _swig_upcall_OnDealerAnswer(IMTRequest const *arg0) {
    IMTDealerSink::OnDealerAnswer(arg0);
  }
  virtual void OnDealerAnswer(IMTRequest const *arg0);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTTickSink : public IMTTickSink
{
 public:
  SwigDirector_IMTTickSink(int swig_p);
  void _swig_upcall_OnTickShort(LPCWSTR arg0,MTTickShort const &arg1) {
    IMTTickSink::OnTick(arg0,arg1);
  }
  virtual void OnTick(LPCWSTR arg0,MTTickShort const &arg1);
  void _swig_upcall_OnTickStatShort(MTTickStat const &arg0) {
    IMTTickSink::OnTickStat(arg0);
  }
  virtual void OnTickStat(MTTickStat const &arg0);
  MTAPIRES _swig_upcall_HookTick(int const arg0,MTTick &arg1) {
    return IMTTickSink::HookTick(arg0,arg1);
  }
  virtual MTAPIRES HookTick(int const arg0,MTTick &arg1);
  MTAPIRES _swig_upcall_HookTickStat(int const arg0,MTTickStat &arg1) {
    return IMTTickSink::HookTickStat(arg0,arg1);
  }
  virtual MTAPIRES HookTickStat(int const arg0,MTTickStat &arg1);
  void _swig_upcall_OnTickServer(int const arg0,MTTick const &arg1) {
    IMTTickSink::OnTick(arg0,arg1);
  }
  virtual void OnTick(int const arg0,MTTick const &arg1);
  void _swig_upcall_OnTickStatServer(int const arg0,MTTickStat const &arg1) {
    IMTTickSink::OnTickStat(arg0,arg1);
  }
  virtual void OnTickStat(int const arg0,MTTickStat const &arg1);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTPositionSink : public IMTPositionSink
{
 public:
  SwigDirector_IMTPositionSink(int swig_p);
  void _swig_upcall_OnPositionAdd(IMTPosition const *arg0) {
    IMTPositionSink::OnPositionAdd(arg0);
  }
  virtual void OnPositionAdd(IMTPosition const *arg0);
  void _swig_upcall_OnPositionUpdate(IMTPosition const *arg0) {
    IMTPositionSink::OnPositionUpdate(arg0);
  }
  virtual void OnPositionUpdate(IMTPosition const *arg0);
  void _swig_upcall_OnPositionDelete(IMTPosition const *arg0) {
    IMTPositionSink::OnPositionDelete(arg0);
  }
  virtual void OnPositionDelete(IMTPosition const *arg0);
  void _swig_upcall_OnPositionClean(UINT64 const arg0) {
    IMTPositionSink::OnPositionClean(arg0);
  }
  virtual void OnPositionClean(UINT64 const arg0);
  void _swig_upcall_OnPositionSync() {
    IMTPositionSink::OnPositionSync();
  }
  virtual void OnPositionSync();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTDealSink : public IMTDealSink
{
 public:
  SwigDirector_IMTDealSink(int swig_p);
  void _swig_upcall_OnDealAdd(IMTDeal const *arg0) {
    IMTDealSink::OnDealAdd(arg0);
  }
  virtual void OnDealAdd(IMTDeal const *arg0);
  void _swig_upcall_OnDealUpdate(IMTDeal const *arg0) {
    IMTDealSink::OnDealUpdate(arg0);
  }
  virtual void OnDealUpdate(IMTDeal const *arg0);
  void _swig_upcall_OnDealDelete(IMTDeal const *arg0) {
    IMTDealSink::OnDealDelete(arg0);
  }
  virtual void OnDealDelete(IMTDeal const *arg0);
  void _swig_upcall_OnDealClean(UINT64 const arg0) {
    IMTDealSink::OnDealClean(arg0);
  }
  virtual void OnDealClean(UINT64 const arg0);
  void _swig_upcall_OnDealSync() {
    IMTDealSink::OnDealSync();
  }
  virtual void OnDealSync();
  void _swig_upcall_OnDealPerform(IMTDeal const *arg0,IMTAccount *arg1,IMTPosition *arg2) {
    IMTDealSink::OnDealPerform(arg0,arg1,arg2);
  }
  virtual void OnDealPerform(IMTDeal const *arg0,IMTAccount *arg1,IMTPosition *arg2);
  void _swig_upcall_OnDealPerformCloseBy(IMTDeal const *arg0,IMTDeal const *arg1,IMTAccount *arg2,IMTPosition *arg3) {
    IMTDealSink::OnDealPerformCloseBy(arg0,arg1,arg2,arg3);
  }
  virtual void OnDealPerformCloseBy(IMTDeal const *arg0,IMTDeal const *arg1,IMTAccount *arg2,IMTPosition *arg3);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTUserSink : public IMTUserSink
{
 public:
  SwigDirector_IMTUserSink(int swig_p);
  void _swig_upcall_OnUserAdd(IMTUser const *arg0) {
    IMTUserSink::OnUserAdd(arg0);
  }
  virtual void OnUserAdd(IMTUser const *arg0);
  void _swig_upcall_OnUserUpdate(IMTUser const *arg0) {
    IMTUserSink::OnUserUpdate(arg0);
  }
  virtual void OnUserUpdate(IMTUser const *arg0);
  void _swig_upcall_OnUserDelete(IMTUser const *arg0) {
    IMTUserSink::OnUserDelete(arg0);
  }
  virtual void OnUserDelete(IMTUser const *arg0);
  void _swig_upcall_OnUserClean(UINT64 const arg0) {
    IMTUserSink::OnUserClean(arg0);
  }
  virtual void OnUserClean(UINT64 const arg0);
  void _swig_upcall_OnUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2) {
    IMTUserSink::OnUserLogin(arg0,arg1,arg2);
  }
  virtual void OnUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2);
  void _swig_upcall_OnUserSync() {
    IMTUserSink::OnUserSync();
  }
  virtual void OnUserSync();
  MTAPIRES _swig_upcall_HookUserAdd(IMTUser *arg0) {
    return IMTUserSink::HookUserAdd(arg0);
  }
  virtual MTAPIRES HookUserAdd(IMTUser *arg0);
  MTAPIRES _swig_upcall_HookUserUpdate(IMTUser const *arg0,IMTUser *arg1) {
    return IMTUserSink::HookUserUpdate(arg0,arg1);
  }
  virtual MTAPIRES HookUserUpdate(IMTUser const *arg0,IMTUser *arg1);
  MTAPIRES _swig_upcall_HookUserDelete(IMTUser const *arg0) {
    return IMTUserSink::HookUserDelete(arg0);
  }
  virtual MTAPIRES HookUserDelete(IMTUser const *arg0);
  MTAPIRES _swig_upcall_HookUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2) {
    return IMTUserSink::HookUserLogin(arg0,arg1,arg2);
  }
  virtual MTAPIRES HookUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2);
  void _swig_upcall_OnUserLogout(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2) {
    IMTUserSink::OnUserLogout(arg0,arg1,arg2);
  }
  virtual void OnUserLogout(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2);
  void _swig_upcall_OnUserArchive(IMTUser const *arg0) {
    IMTUserSink::OnUserArchive(arg0);
  }
  virtual void OnUserArchive(IMTUser const *arg0);
  void _swig_upcall_OnUserRestore(IMTUser const *arg0) {
    IMTUserSink::OnUserRestore(arg0);
  }
  virtual void OnUserRestore(IMTUser const *arg0);
  MTAPIRES _swig_upcall_HookUserArchive(IMTUser const *arg0) {
    return IMTUserSink::HookUserArchive(arg0);
  }
  virtual MTAPIRES HookUserArchive(IMTUser const *arg0);
  MTAPIRES _swig_upcall_HookUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1) {
    return IMTUserSink::HookUserLoginExt(arg0,arg1);
  }
  virtual MTAPIRES HookUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1);
  void _swig_upcall_OnUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1) {
    IMTUserSink::OnUserLoginExt(arg0,arg1);
  }
  virtual void OnUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1);
  void _swig_upcall_OnUserLogoutExt(IMTUser const *arg0,IMTOnline const *arg1) {
    IMTUserSink::OnUserLogoutExt(arg0,arg1);
  }
  virtual void OnUserLogoutExt(IMTUser const *arg0,IMTOnline const *arg1);
  void _swig_upcall_OnUserAddExt(IMTUser const *arg0,LPCWSTR arg1,LPCWSTR arg2) {
    IMTUserSink::OnUserAddExt(arg0,arg1,arg2);
  }
  virtual void OnUserAddExt(IMTUser const *arg0,LPCWSTR arg1,LPCWSTR arg2);
  void _swig_upcall_OnUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2) {
    IMTUserSink::OnUserChangePassword(arg0,arg1,arg2);
  }
  virtual void OnUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2);
  MTAPIRES _swig_upcall_HookUserAddExt(IMTUser *arg0,LPCWSTR arg1,LPCWSTR arg2) {
    return IMTUserSink::HookUserAddExt(arg0,arg1,arg2);
  }
  virtual MTAPIRES HookUserAddExt(IMTUser *arg0,LPCWSTR arg1,LPCWSTR arg2);
  MTAPIRES _swig_upcall_HookUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2) {
    return IMTUserSink::HookUserChangePassword(arg0,arg1,arg2);
  }
  virtual MTAPIRES HookUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

#endif
