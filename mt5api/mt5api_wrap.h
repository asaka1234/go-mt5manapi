/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: mt5api.i

#ifndef SWIG_mt5api_WRAP_H_
#define SWIG_mt5api_WRAP_H_

class Swig_memory;

class SwigDirector_IMTManagerSink : public IMTManagerSink
{
 public:
  SwigDirector_IMTManagerSink(int swig_p);
  void _swig_upcall_OnDisconnect() {
    IMTManagerSink::OnDisconnect();
  }
  virtual void OnDisconnect();
  void _swig_upcall_OnTradeAccountSet(MTAPIRES const arg0,INT64 const arg1,IMTUser const *arg2,IMTAccount const *arg3,IMTOrderArray const *arg4,IMTPositionArray const *arg5) {
    IMTManagerSink::OnTradeAccountSet(arg0,arg1,arg2,arg3,arg4,arg5);
  }
  virtual void OnTradeAccountSet(MTAPIRES const arg0,INT64 const arg1,IMTUser const *arg2,IMTAccount const *arg3,IMTOrderArray const *arg4,IMTPositionArray const *arg5);
  void _swig_upcall_OnConnect() {
    IMTManagerSink::OnConnect();
  }
  virtual void OnConnect();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTDealerSink : public IMTDealerSink
{
 public:
  SwigDirector_IMTDealerSink(int swig_p);
  void _swig_upcall_OnDealerResult(IMTConfirm const *arg0) {
    IMTDealerSink::OnDealerResult(arg0);
  }
  virtual void OnDealerResult(IMTConfirm const *arg0);
  void _swig_upcall_OnDealerAnswer(IMTRequest const *arg0) {
    IMTDealerSink::OnDealerAnswer(arg0);
  }
  virtual void OnDealerAnswer(IMTRequest const *arg0);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTManagerAPI : public IMTManagerAPI
{
 public:
  SwigDirector_IMTManagerAPI(int swig_p);
  virtual void Release();
  virtual MTAPIRES LicenseCheck(MTLicenseCheck &check);
  virtual void *Allocate(UINT const bytes);
  virtual void Free(void *ptr);
  virtual void ProxySet(MTProxyInfo const &proxy);
  virtual MTAPIRES Connect(LPCWSTR server,UINT64 login,LPCWSTR password,LPCWSTR password_cert,UINT64 pump_mode,UINT timeout);
  virtual MTAPIRES Connect(LPCWSTR server,UINT64 login,LPCWSTR password,LPCWSTR password_cert,UINT64 pump_mode);
  virtual void Disconnect();
  virtual MTAPIRES Subscribe(IMTManagerSink *sink);
  virtual MTAPIRES Unsubscribe(IMTManagerSink *sink);
  virtual MTAPIRES LoggerOut(UINT const code,LPCWSTR format,...arg2);
  virtual void LoggerFlush();
  virtual MTAPIRES LoggerServerRequest(UINT const mode,UINT const type,INT64 const from,INT64 const to,LPCWSTR filter,MTLogRecord *&records,UINT &records_total);
  virtual MTAPIRES LoggerOutString(UINT const code,LPCWSTR string);
  virtual MTAPIRES LoggerReserved2();
  virtual MTAPIRES LoggerReserved3();
  virtual MTAPIRES LoggerReserved4();
  virtual IMTConTime *TimeCreate();
  virtual MTAPIRES TimeSubscribe(IMTConTimeSink *sink);
  virtual MTAPIRES TimeUnsubscribe(IMTConTimeSink *sink);
  virtual MTAPIRES TimeGet(IMTConTime *config);
  virtual INT64 TimeServer();
  virtual MTAPIRES TimeServerRequest(INT64 &time_msc);
  virtual MTAPIRES TimeReserved2();
  virtual MTAPIRES TimeReserved3();
  virtual MTAPIRES TimeReserved4();
  virtual IMTConHoliday *HolidayCreate();
  virtual MTAPIRES HolidaySubscribe(IMTConHolidaySink *sink);
  virtual MTAPIRES HolidayUnsubscribe(IMTConHolidaySink *sink);
  virtual UINT HolidayTotal();
  virtual MTAPIRES HolidayNext(UINT const pos,IMTConHoliday *config);
  virtual IMTConManagerReport *ManagerReportCreate();
  virtual IMTConManager *ManagerCreate();
  virtual IMTConManagerAccess *ManagerAccessCreate();
  virtual MTAPIRES ManagerCurrent(IMTConManager *manager);
  virtual IMTConGroup *GroupCreate();
  virtual IMTConGroupSymbol *GroupSymbolCreate();
  virtual IMTConCommission *GroupCommissionCreate();
  virtual IMTConCommTier *GroupTierCreate();
  virtual MTAPIRES GroupSubscribe(IMTConGroupSink *sink);
  virtual MTAPIRES GroupUnsubscribe(IMTConGroupSink *sink);
  virtual UINT GroupTotal();
  virtual MTAPIRES GroupNext(UINT const pos,IMTConGroup *group);
  virtual MTAPIRES GroupGet(LPCWSTR name,IMTConGroup *group);
  virtual MTAPIRES GroupRequest(LPCWSTR name,IMTConGroup *group);
  virtual MTAPIRES GroupUpdate(IMTConGroup *group);
  virtual MTAPIRES GroupUpdateBatch(IMTConGroup **configs,UINT const config_total,MTAPIRES *results);
  virtual IMTConGroupArray *GroupCreateArray();
  virtual MTAPIRES GroupRequestArray(LPCWSTR mask,IMTConGroupArray *groups);
  virtual IMTConSymbol *SymbolCreate();
  virtual IMTConSymbolSession *SymbolSessionCreate();
  virtual MTAPIRES SymbolSubscribe(IMTConSymbolSink *sink);
  virtual MTAPIRES SymbolUnsubscribe(IMTConSymbolSink *sink);
  virtual UINT SymbolTotal();
  virtual MTAPIRES SymbolNext(UINT const pos,IMTConSymbol *symbol);
  virtual MTAPIRES SymbolGet(LPCWSTR name,IMTConSymbol *symbol);
  virtual MTAPIRES SymbolGet(LPCWSTR name,LPCWSTR group,IMTConSymbol *symbol);
  virtual MTAPIRES SymbolRequest(LPCWSTR name,IMTConSymbol *symbol);
  virtual MTAPIRES SymbolRequest(LPCWSTR name,LPCWSTR group,IMTConSymbol *symbol);
  virtual MTAPIRES SymbolExist(IMTConSymbol const *symbol,IMTConGroup const *group);
  virtual MTAPIRES SymbolUpdate(IMTConSymbol *symbol);
  virtual MTAPIRES SymbolUpdateBatch(IMTConSymbol **configs,UINT const configs_total,MTAPIRES *results);
  virtual IMTConSymbolArray *SymbolCreateArray();
  virtual MTAPIRES SymbolRequestArray(LPCWSTR mask,LPCWSTR group,IMTConSymbolArray *symbols);
  virtual MTAPIRES SelectedAdd(LPCWSTR symbol);
  virtual MTAPIRES SelectedAddAll();
  virtual MTAPIRES SelectedDelete(LPCWSTR symbol);
  virtual MTAPIRES SelectedDelete(UINT const pos);
  virtual MTAPIRES SelectedDeleteAll();
  virtual MTAPIRES SelectedShift(UINT const pos,int const shift);
  virtual UINT SelectedTotal();
  virtual MTAPIRES SelectedNext(UINT const pos,MTAPISTR &symbol);
  virtual MTAPIRES SelectedAddBatch(LPWSTR *symbols,UINT symbols_total);
  virtual MTAPIRES SelectedDeleteBatch(LPWSTR *symbols,UINT symbols_total);
  virtual MTAPIRES SelectedReserved1();
  virtual MTAPIRES SelectedReserved2();
  virtual IMTUser *UserCreate();
  virtual IMTAccount *UserCreateAccount();
  virtual MTAPIRES UserSubscribe(IMTUserSink *sink);
  virtual MTAPIRES UserUnsubscribe(IMTUserSink *sink);
  virtual MTAPIRES UserAdd(IMTUser *user,LPCWSTR master_pass,LPCWSTR investor_pass);
  virtual MTAPIRES UserDelete(UINT64 const login);
  virtual MTAPIRES UserUpdate(IMTUser *user);
  virtual UINT UserTotal();
  virtual MTAPIRES UserGet(UINT64 const login,IMTUser *user);
  virtual MTAPIRES UserRequest(UINT64 const login,IMTUser *user);
  virtual MTAPIRES UserGroup(UINT64 const login,MTAPISTR &group);
  virtual MTAPIRES UserLogins(LPCWSTR group,UINT64 *&logins,UINT &logins_total);
  virtual MTAPIRES UserPasswordCheck(UINT const type,UINT64 const login,LPCWSTR password);
  virtual MTAPIRES UserPasswordChange(UINT const type,UINT64 const login,LPCWSTR password);
  virtual MTAPIRES UserCertDelete(UINT64 const login);
  virtual MTAPIRES UserCertConfirm(UINT64 const login);
  virtual MTAPIRES UserExternalSync(UINT64 const login,UINT64 const gateway_id,LPCWSTR account_id,UINT sync_mode);
  virtual MTAPIRES UserAccountGet(UINT64 const login,IMTAccount *account);
  virtual MTAPIRES UserAccountRequest(UINT64 const login,IMTAccount *account);
  virtual IMTCertificate *UserCertCreate();
  virtual MTAPIRES UserCertUpdate(UINT64 const login,IMTCertificate const *certificate);
  virtual MTAPIRES UserCertGet(UINT64 const login,IMTCertificate *certificate);
  virtual MTAPIRES UserBalanceCheck(UINT64 const login,UINT const fixflag,double &balance_user,double &balance_history,double &credit_user,double &credit_history);
  virtual IMTDeal *DealCreate();
  virtual IMTDealArray *DealCreateArray();
  virtual MTAPIRES DealRequest(UINT64 const ticket,IMTDeal *deal);
  virtual MTAPIRES DealRequest(UINT64 const login,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealSubscribe(IMTDealSink *sink);
  virtual MTAPIRES DealUnsubscribe(IMTDealSink *sink);
  virtual MTAPIRES DealDelete(UINT64 const ticket);
  virtual MTAPIRES DealUpdate(IMTDeal *deal);
  virtual IMTPosition *PositionCreate();
  virtual IMTPositionArray *PositionCreateArray();
  virtual MTAPIRES PositionSubscribe(IMTPositionSink *sink);
  virtual MTAPIRES PositionUnsubscribe(IMTPositionSink *sink);
  virtual MTAPIRES PositionGet(UINT64 const login,LPCWSTR symbol,IMTPosition *position);
  virtual MTAPIRES PositionGet(UINT64 const login,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequest(UINT64 const login,IMTPositionArray *positions);
  virtual MTAPIRES PositionGetByTicket(UINT64 const ticket,IMTPosition *position);
  virtual MTAPIRES PositionDelete(IMTPosition *position);
  virtual MTAPIRES PositionUpdate(IMTPosition *position);
  virtual MTAPIRES PositionGetByGroup(LPCWSTR mask,IMTPositionArray *positions);
  virtual IMTOrder *OrderCreate();
  virtual IMTOrderArray *OrderCreateArray();
  virtual MTAPIRES OrderSubscribe(IMTOrderSink *sink);
  virtual MTAPIRES OrderUnsubscribe(IMTOrderSink *sink);
  virtual MTAPIRES OrderGet(UINT64 const ticket,IMTOrder *order);
  virtual MTAPIRES OrderGetOpen(UINT64 const login,IMTOrderArray *orders);
  virtual MTAPIRES OrderRequest(UINT64 const ticket,IMTOrder *order);
  virtual MTAPIRES OrderRequestOpen(UINT64 const login,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequest(UINT64 const login,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES OrderDelete(UINT64 const ticket);
  virtual MTAPIRES OrderUpdate(IMTOrder *order);
  virtual MTAPIRES OrderGetByGroup(LPCWSTR mask,IMTOrderArray *orders);
  virtual MTAPIRES OrderGetByLogins(UINT64 const *logins,UINT const logins_total,IMTOrderArray *orders);
  virtual MTAPIRES TickSubscribe(IMTTickSink *sink);
  virtual MTAPIRES TickUnsubscribe(IMTTickSink *sink);
  virtual MTAPIRES TickAdd(LPCWSTR symbol,MTTick &tick);
  virtual MTAPIRES TickAddStat(MTTick &tick,MTTickStat &stat);
  virtual MTAPIRES TickLast(LPCWSTR symbol,MTTickShort &tick);
  virtual MTAPIRES TickLast(UINT &id,MTTick *&ticks,UINT &ticks_total);
  virtual MTAPIRES TickStat(LPCWSTR symbol,MTTickStat &stat);
  virtual MTAPIRES TickHistoryRequest(LPCWSTR symbol,INT64 const from,INT64 const to,MTTickShort *&ticks,UINT &ticks_total);
  virtual MTAPIRES TickLast(LPCWSTR symbol,LPCWSTR group,MTTickShort &tick);
  virtual MTAPIRES TickLastRaw(LPCWSTR symbol,MTTickShort &tick);
  virtual MTAPIRES TickAddBatch(MTTick *ticks,UINT const ticks_total);
  virtual MTAPIRES TickReserved2();
  virtual MTAPIRES BookSubscribe(LPCWSTR symbol,IMTBookSink *sink);
  virtual MTAPIRES BookUnsubscribe(LPCWSTR symbol,IMTBookSink *sink);
  virtual MTAPIRES BookGet(LPCWSTR symbol,MTBook &book);
  virtual MTAPIRES BookSubscribeBatch(LPWSTR *symbols,UINT symbols_total,IMTBookSink *sink);
  virtual MTAPIRES BookUnsubscribeBatch(LPWSTR *symbols,UINT symbols_total,IMTBookSink *sink);
  virtual MTAPIRES BookReserved3();
  virtual MTAPIRES BookReserved4();
  virtual IMTMail *MailCreate();
  virtual MTAPIRES MailSubscribe(IMTMailSink *sink);
  virtual MTAPIRES MailUnsubscribe(IMTMailSink *sink);
  virtual UINT MailTotal();
  virtual MTAPIRES MailNext(UINT const pos,IMTMail *mail);
  virtual MTAPIRES MailDelete(UINT const pos);
  virtual MTAPIRES MailDeleteId(UINT64 const id);
  virtual MTAPIRES MailSend(IMTMail *mail);
  virtual MTAPIRES MailBodyRequest(UINT64 const id,IMTMail *mail);
  virtual MTAPIRES MailReserved2();
  virtual MTAPIRES MailReserved3();
  virtual MTAPIRES MailReserved4();
  virtual IMTNews *NewsCreate();
  virtual MTAPIRES NewsSubscribe(IMTNewsSink *sink);
  virtual MTAPIRES NewsUnsubscribe(IMTNewsSink *sink);
  virtual UINT NewsTotal();
  virtual MTAPIRES NewsNext(UINT const pos,IMTNews *news);
  virtual MTAPIRES NewsBodyRequest(UINT64 const id,IMTNews *news);
  virtual MTAPIRES NewsSend(IMTNews *news);
  virtual MTAPIRES NewsReserved1();
  virtual MTAPIRES NewsReserved2();
  virtual MTAPIRES NewsReserved3();
  virtual MTAPIRES NewsReserved4();
  virtual IMTRequest *RequestCreate();
  virtual IMTRequestArray *RequestCreateArray();
  virtual MTAPIRES RequestSubscribe(IMTRequestSink *sink);
  virtual MTAPIRES RequestUnsubscribe(IMTRequestSink *sink);
  virtual UINT RequestTotal();
  virtual MTAPIRES RequestNext(UINT const pos,IMTRequest *request);
  virtual MTAPIRES RequestGet(UINT const id,IMTRequest *request);
  virtual MTAPIRES RequestGetAll(IMTRequestArray *requests);
  virtual MTAPIRES RequestReserved1();
  virtual MTAPIRES RequestReserved2();
  virtual MTAPIRES RequestReserved3();
  virtual MTAPIRES RequestReserved4();
  virtual IMTConfirm *DealerConfirmCreate();
  virtual MTAPIRES DealerUnsubscribe(IMTDealerSink *sink);
  virtual MTAPIRES DealerStart();
  virtual MTAPIRES DealerStop();
  virtual MTAPIRES DealerGet(IMTRequest *request);
  virtual MTAPIRES DealerLock(UINT const id,IMTRequest *request);
  virtual MTAPIRES DealerAnswer(IMTConfirm *confirm);
  virtual MTAPIRES DealerSend(IMTRequest *request,IMTDealerSink *sink,UINT &id);
  virtual MTAPIRES DealerBalance(UINT64 const login,double const value,UINT const type,LPCWSTR comment,UINT64 &deal_id);
  virtual MTAPIRES DealerBalanceRaw(UINT64 const login,double const value,UINT const type,LPCWSTR comment,UINT64 &deal_id);
  virtual MTAPIRES DealerReserved1();
  virtual MTAPIRES DealerReserved2();
  virtual MTAPIRES DealerReserved3();
  virtual MTAPIRES CustomCommand(LPCVOID indata,UINT const indata_len,LPVOID &outdata,UINT &outdata_len);
  virtual MTAPIRES CustomCommand(IMTByteStream *indata,IMTByteStream *outdata);
  virtual IMTByteStream *CustomCreateStream();
  virtual MTAPIRES CustomReserved3();
  virtual MTAPIRES CustomReserved4();
  virtual IMTSummary *SummaryCreate();
  virtual IMTSummaryArray *SummaryCreateArray();
  virtual MTAPIRES SummarySubscribe(IMTSummarySink *sink);
  virtual MTAPIRES SummaryUnsubscribe(IMTSummarySink *sink);
  virtual LPCWSTR SummaryCurrency();
  virtual MTAPIRES SummaryCurrency(LPCWSTR currency);
  virtual UINT SummaryTotal();
  virtual MTAPIRES SummaryNext(UINT const pos,IMTSummary *summary);
  virtual MTAPIRES SummaryGet(LPCWSTR symbol,IMTSummary *summary);
  virtual MTAPIRES SummaryGetAll(IMTSummaryArray *summary);
  virtual IMTExposure *ExposureCreate();
  virtual IMTExposureArray *ExposureCreateArray();
  virtual MTAPIRES ExposureSubscribe(IMTExposureSink *sink);
  virtual MTAPIRES ExposureUnsubscribe(IMTExposureSink *sink);
  virtual LPCWSTR ExposureCurrency();
  virtual MTAPIRES ExposureCurrency(LPCWSTR currency);
  virtual UINT ExposureTotal();
  virtual MTAPIRES ExposureNext(UINT const pos,IMTExposure *exposure);
  virtual MTAPIRES ExposureGet(LPCWSTR symbol,IMTExposure *exposure);
  virtual MTAPIRES ExposureGetAll(IMTExposureArray *exposure);
  virtual MTAPIRES UserExternalGet(UINT64 const gateway_id,LPCWSTR account,IMTUser *user);
  virtual MTAPIRES UserExternalGet(LPCWSTR account,IMTUser *user);
  virtual MTAPIRES UserExternalRequest(UINT64 const gateway_id,LPCWSTR account,IMTUser *user);
  virtual MTAPIRES UserExternalRequest(LPCWSTR account,IMTUser *user);
  virtual IMTUserArray *UserCreateArray();
  virtual IMTAccountArray *UserCreateAccountArray();
  virtual MTAPIRES UserRequestArray(LPCWSTR group,IMTUserArray *users);
  virtual MTAPIRES UserAccountRequestArray(LPCWSTR group,IMTAccountArray *accounts);
  virtual MTAPIRES PasswordChange(UINT const type,LPCWSTR password);
  virtual MTAPIRES PasswordReserved1();
  virtual MTAPIRES PasswordReserved2();
  virtual IMTDaily *DailyCreate();
  virtual IMTDailyArray *DailyCreateArray();
  virtual MTAPIRES DailyRequest(UINT64 const login,INT64 const from,INT64 const to,IMTDailyArray *daily);
  virtual MTAPIRES DailyRequestLight(UINT64 const login,INT64 const from,INT64 const to,IMTDailyArray *daily);
  virtual MTAPIRES DailyRequestByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTDailyArray *daily);
  virtual MTAPIRES DailyRequestByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTDailyArray *daily);
  virtual MTAPIRES DailyRequestLightByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTDailyArray *daily);
  virtual MTAPIRES DailyRequestLightByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTDailyArray *daily);
  virtual IMTConPlugin *PluginCreate();
  virtual IMTConPluginModule *PluginModuleCreate();
  virtual IMTConParam *PluginParamCreate();
  virtual MTAPIRES PluginUpdate(IMTConPlugin *plugin);
  virtual UINT PluginTotal();
  virtual MTAPIRES PluginNext(UINT const pos,IMTConPlugin *plugin);
  virtual MTAPIRES PluginGet(LPCWSTR name,IMTConPlugin *plugin);
  virtual MTAPIRES PluginReserved1();
  virtual MTAPIRES PluginReserved2();
  virtual MTAPIRES PluginReserved3();
  virtual MTAPIRES PluginReserved4();
  virtual IMTConSpread *SpreadCreate();
  virtual IMTConSpreadLeg *SpreadLegCreate();
  virtual MTAPIRES SpreadSubscribe(IMTConSpreadSink *sink);
  virtual MTAPIRES SpreadUnsubscribe(IMTConSpreadSink *sink);
  virtual UINT SpreadTotal();
  virtual MTAPIRES SpreadNext(UINT const pos,IMTConSpread *spread);
  virtual MTAPIRES SpreadReserved1();
  virtual MTAPIRES SpreadReserved2();
  virtual MTAPIRES SpreadReserved3();
  virtual MTAPIRES SpreadReserved4();
  virtual MTAPIRES TradeProfit(LPCWSTR group,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price_open,double const price_close,double &profit,double &profit_rate);
  virtual MTAPIRES TradeRateBuy(LPCWSTR base,LPCWSTR currency,double &rate,LPCWSTR group,LPCWSTR symbol,double const price);
  virtual MTAPIRES TradeRateBuy(LPCWSTR base,LPCWSTR currency,double &rate,LPCWSTR group,LPCWSTR symbol);
  virtual MTAPIRES TradeRateBuy(LPCWSTR base,LPCWSTR currency,double &rate,LPCWSTR group);
  virtual MTAPIRES TradeRateBuy(LPCWSTR base,LPCWSTR currency,double &rate);
  virtual MTAPIRES TradeRateSell(LPCWSTR base,LPCWSTR currency,double &rate,LPCWSTR group,LPCWSTR symbol,double const price);
  virtual MTAPIRES TradeRateSell(LPCWSTR base,LPCWSTR currency,double &rate,LPCWSTR group,LPCWSTR symbol);
  virtual MTAPIRES TradeRateSell(LPCWSTR base,LPCWSTR currency,double &rate,LPCWSTR group);
  virtual MTAPIRES TradeRateSell(LPCWSTR base,LPCWSTR currency,double &rate);
  virtual MTAPIRES TradeMarginCheck(UINT64 const login,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price,IMTAccount *account_new,IMTAccount *account_current);
  virtual MTAPIRES TradeMarginCheck(UINT64 const login,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price,IMTAccount *account_new);
  virtual MTAPIRES TradeMarginCheck(UINT64 const login,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price);
  virtual MTAPIRES TradeMarginCheck(IMTOrder const *order,IMTAccount *account_new,IMTAccount *account_current);
  virtual MTAPIRES TradeMarginCheck(IMTOrder const *order,IMTAccount *account_new);
  virtual MTAPIRES TradeMarginCheck(IMTOrder const *order);
  virtual MTAPIRES TradeProfitExt(LPCWSTR group,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price_open,double const price_close,double &profit,double &profit_rate);
  virtual MTAPIRES TradeMarginCheckExt(UINT64 const login,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price,IMTAccount *account_new,IMTAccount *account_current);
  virtual MTAPIRES TradeMarginCheckExt(UINT64 const login,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price,IMTAccount *account_new);
  virtual MTAPIRES TradeMarginCheckExt(UINT64 const login,LPCWSTR symbol,UINT const type,UINT64 const volume,double const price);
  virtual MTAPIRES TradeReserved3();
  virtual MTAPIRES TradeReserved4();
  virtual MTAPIRES NetworkRescan(UINT const flags,UINT const timeout);
  virtual UINT64 NetworkBytesSent();
  virtual UINT64 NetworkBytesRead();
  virtual MTAPIRES NetworkServer(MTAPISTR &server);
  virtual MTAPIRES NetworkAddress(MTAPISTR &address);
  virtual MTAPIRES NetworkReserved1();
  virtual MTAPIRES NetworkReserved2();
  virtual MTAPIRES NetworkReserved3();
  virtual MTAPIRES NetworkReserved4();
  virtual IMTOnline *OnlineCreate();
  virtual IMTOnlineArray *OnlineCreateArray();
  virtual UINT OnlineTotal();
  virtual MTAPIRES OnlineNext(UINT const pos,IMTOnline *online);
  virtual MTAPIRES OnlineGet(UINT64 const login,IMTOnlineArray *online);
  virtual MTAPIRES OnlineDisconnect(IMTOnline *online);
  virtual MTAPIRES OnlineDisconnectBatch(IMTOnlineArray *online,MTAPIRES *results);
  virtual MTAPIRES OnlineDisconnectBatchArray(IMTOnline **online,UINT const online_total,MTAPIRES *results);
  virtual MTAPIRES OnlineReserved4();
  virtual MTAPIRES TradeAccountSet(INT64 const request_id,IMTUser const *user,IMTAccount const *account,IMTOrderArray const *orders,IMTPositionArray const *positions);
  virtual MTAPIRES TradeAccountReserved1();
  virtual MTAPIRES TradeAccountReserved2();
  virtual MTAPIRES TradeAccountReserved3();
  virtual MTAPIRES TradeAccountReserved4();
  virtual MTAPIRES NotificationsSend(LPWSTR metaquotes_ids,LPCWSTR message);
  virtual MTAPIRES NotificationsSend(UINT64 const *logins,UINT const logins_total,LPCWSTR message);
  virtual MTAPIRES NotificationsReserved1();
  virtual MTAPIRES NotificationsReserved2();
  virtual MTAPIRES NotificationsReserved3();
  virtual MTAPIRES NotificationsReserved4();
  virtual MTAPIRES SettingGet(LPCWSTR section,LPCWSTR key,LPVOID &outdata,UINT &outdata_len);
  virtual MTAPIRES SettingSet(LPCWSTR section,LPCWSTR key,LPVOID const indata,UINT const indata_len);
  virtual MTAPIRES SettingDelete(LPCWSTR section,LPCWSTR key);
  virtual MTAPIRES SettingReserved1();
  virtual MTAPIRES SettingReserved2();
  virtual MTAPIRES SettingReserved3();
  virtual MTAPIRES SettingReserved4();
  virtual MTAPIRES ChartRequest(LPCWSTR symbol,INT64 const from,INT64 const to,MTChartBar *&bars,UINT &bars_total);
  virtual MTAPIRES ChartDelete(LPCWSTR symbol,INT64 const *bars_dates,UINT const bars_total);
  virtual MTAPIRES ChartUpdate(LPCWSTR symbol,MTChartBar const *bars,UINT const bars_total);
  virtual MTAPIRES ChartReplace(LPCWSTR symbol,INT64 const from,INT64 const to,MTChartBar const *bars,UINT const bars_total);
  virtual MTAPIRES ChartSplit(LPCWSTR symbol,UINT const new_shares,UINT const old_shares,UINT const rounding_rule,INT64 const datetime_from,INT64 const datetime_to);
  virtual MTAPIRES ChartReserved2();
  virtual MTAPIRES ChartReserved3();
  virtual MTAPIRES TickHistoryRequestRaw(LPCWSTR symbol,INT64 const from,INT64 const to,MTTickShort *&ticks,UINT &ticks_total);
  virtual MTAPIRES TickHistoryAdd(LPCWSTR symbol,MTTickShort const *ticks,UINT const ticks_total);
  virtual MTAPIRES TickHistoryReplace(LPCWSTR symbol,INT64 const from_msc,INT64 const to_msc,MTTickShort const *ticks,UINT const ticks_total);
  virtual MTAPIRES TickHistoryReserved1();
  virtual MTAPIRES TickHistoryReserved2();
  virtual MTAPIRES TickHistoryReserved3();
  virtual MTAPIRES TickHistoryReserved4();
  virtual MTAPIRES DealRequestByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealRequestByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTDealArray *deals);
  virtual MTAPIRES DealUpdateBatch(IMTDealArray *deals,MTAPIRES *results);
  virtual MTAPIRES DealUpdateBatchArray(IMTDeal **deals,UINT const deals_total,MTAPIRES *results);
  virtual MTAPIRES DealDeleteBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES DealRequestPage(UINT64 const login,INT64 const from,INT64 const to,UINT const offset,UINT const total,IMTDealArray *deals);
  virtual MTAPIRES DealAdd(IMTDeal *deal);
  virtual MTAPIRES DealAddBatch(IMTDealArray *deals,MTAPIRES *results);
  virtual MTAPIRES DealAddBatchArray(IMTDeal **deals,UINT const deals_total,MTAPIRES *results);
  virtual MTAPIRES PositionGetByLogins(UINT64 const *logins,UINT const logins_total,IMTPositionArray *positions);
  virtual MTAPIRES PositionGetByTickets(UINT64 const *tickets,UINT const tickets_total,IMTPositionArray *positions);
  virtual MTAPIRES PositionDeleteByTicket(UINT64 const ticket);
  virtual MTAPIRES PositionRequestByGroup(LPCWSTR group,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTPositionArray *positions);
  virtual MTAPIRES PositionUpdateBatch(IMTPositionArray *positions,MTAPIRES *results);
  virtual MTAPIRES PositionUpdateBatchArray(IMTPosition **positions,UINT const positions_total,MTAPIRES *results);
  virtual MTAPIRES PositionDeleteBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES PositionSplit(UINT64 const *tickets,UINT const tickets_total,double const *adjustments,UINT const new_shares,UINT const old_shares,UINT const round_rule_price,UINT const round_rule_volume,UINT const flags,MTAPIRES *results);
  virtual MTAPIRES PositionGetBySymbol(LPCWSTR groups,LPCWSTR symbol,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,IMTPositionArray *positions);
  virtual MTAPIRES OrderGetByTickets(UINT64 const *tickets,UINT const tickets_total,IMTOrderArray *orders);
  virtual MTAPIRES OrderRequestByGroup(LPCWSTR group,IMTOrderArray *orders);
  virtual MTAPIRES OrderRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTOrderArray *orders);
  virtual MTAPIRES OrderRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTOrderArray *orders);
  virtual MTAPIRES OrderUpdateBatch(IMTOrderArray *orders,MTAPIRES *results);
  virtual MTAPIRES OrderUpdateBatchArray(IMTOrder **orders,UINT const orders_total,MTAPIRES *results);
  virtual MTAPIRES OrderDeleteBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES OrderGetBySymbol(LPCWSTR groups,LPCWSTR symbol,IMTOrderArray *orders);
  virtual MTAPIRES OrderAdd(IMTOrder *order);
  virtual MTAPIRES OrderAddBatch(IMTOrderArray *orders,MTAPIRES *results);
  virtual MTAPIRES OrderAddBatchArray(IMTOrder **orders,UINT const orders_total,MTAPIRES *results);
  virtual MTAPIRES HistoryRequestByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestPage(UINT64 const login,INT64 const from,INT64 const to,UINT const offset,UINT const total,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryReserved4();
  virtual MTAPIRES EmailSend(LPCWSTR account,LPCWSTR to,LPCWSTR to_name,LPCWSTR subject,LPCWSTR body);
  virtual MTAPIRES EmailReserved1();
  virtual MTAPIRES EmailReserved2();
  virtual MTAPIRES EmailReserved3();
  virtual MTAPIRES EmailReserved4();
  virtual MTAPIRES MessengerSend(LPCWSTR destination,LPCWSTR group,LPCWSTR sender,LPCWSTR text);
  virtual MTAPIRES MessengerVerifyPhone(LPCWSTR phone_number);
  virtual MTAPIRES MessengerReserved2();
  virtual MTAPIRES MessengerReserved3();
  virtual MTAPIRES MessengerReserved4();
  virtual IMTECNMatching *ECNCreateMatching();
  virtual IMTECNMatchingArray *ECNCreateMatchingArray();
  virtual IMTECNFilling *ECNCreateFilling();
  virtual IMTECNFillingArray *ECNCreateFillingArray();
  virtual IMTECNProvider *ECNCreateProvider();
  virtual IMTECNProviderArray *ECNCreateProviderArray();
  virtual IMTECNHistoryMatching *ECNCreateHistoryMatching();
  virtual IMTECNHistoryMatchingArray *ECNCreateHistoryMatchingArray();
  virtual IMTECNHistoryFilling *ECNCreateHistoryFilling();
  virtual IMTECNHistoryFillingArray *ECNCreateHistoryFillingArray();
  virtual IMTECNHistoryDeal *ECNCreateHistoryDeal();
  virtual IMTECNHistoryDealArray *ECNCreateHistoryDealArray();
  virtual MTAPIRES ECNRequestByGroup(LPCWSTR mask,IMTECNMatchingArray *matching,IMTECNFillingArray *filling,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTECNMatchingArray *matching,IMTECNFillingArray *filling,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTECNMatchingArray *matching,IMTECNFillingArray *filling,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestHistoryByGroup(LPCWSTR mask,INT64 const from,INT64 const to,IMTECNHistoryMatchingArray *matching,IMTECNHistoryFillingArray *filling,IMTECNHistoryDealArray *deals,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestHistoryByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTECNHistoryMatchingArray *matching,IMTECNHistoryFillingArray *filling,IMTECNHistoryDealArray *deals,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestHistoryByTickets(UINT64 const *tickets,UINT const tickets_total,INT64 const from,INT64 const to,IMTECNHistoryMatchingArray *matching,IMTECNHistoryFillingArray *filling,IMTECNHistoryDealArray *deals,IMTECNProviderArray *providers);
  virtual IMTClient *ClientCreate();
  virtual IMTClientArray *ClientCreateArray();
  virtual MTAPIRES ClientAdd(IMTClient *client);
  virtual MTAPIRES ClientAddBatch(IMTClientArray *clients,MTAPIRES *results);
  virtual MTAPIRES ClientAddBatchArray(IMTClient **clients,UINT const clients_total,MTAPIRES *results);
  virtual MTAPIRES ClientUpdate(IMTClient *client);
  virtual MTAPIRES ClientUpdateBatch(IMTClientArray *clients,MTAPIRES *results);
  virtual MTAPIRES ClientUpdateBatchArray(IMTClient **clients,UINT const clients_total,MTAPIRES *results);
  virtual MTAPIRES ClientDelete(UINT64 const client_id);
  virtual MTAPIRES ClientDeleteBatch(UINT64 const *client_ids,UINT const client_ids_total,MTAPIRES *results);
  virtual MTAPIRES ClientRequest(UINT64 const client_id,IMTClient *client);
  virtual MTAPIRES ClientRequestByGroup(LPCWSTR groups,IMTClientArray *clients);
  virtual MTAPIRES ClientRequestHistory(UINT64 const client_id,UINT64 const author,INT64 const from,INT64 const to,IMTClientArray *history);
  virtual MTAPIRES ClientUserAdd(UINT64 const client_id,UINT64 const login);
  virtual MTAPIRES ClientUserAddBatch(UINT64 const client_id,UINT64 const *logins,UINT const logins_total,MTAPIRES *results);
  virtual MTAPIRES ClientUserDelete(UINT64 const client_id,UINT64 const login);
  virtual MTAPIRES ClientUserDeleteBatch(UINT64 const client_id,UINT64 const *logins,UINT const logins_total,MTAPIRES *results);
  virtual MTAPIRES ClientUserRequest(UINT64 const client_id,UINT64 *&logins,UINT &logins_total);
  virtual MTAPIRES ClientReserved1();
  virtual MTAPIRES ClientReserved2();
  virtual MTAPIRES ClientReserved3();
  virtual MTAPIRES ClientReserved4();
  virtual IMTDocument *DocumentCreate();
  virtual IMTDocumentArray *DocumentCreateArray();
  virtual MTAPIRES DocumentAdd(IMTDocument *document);
  virtual MTAPIRES DocumentAddBatch(IMTDocumentArray *documents,MTAPIRES *results);
  virtual MTAPIRES DocumentAddBatchArray(IMTDocument **documents,UINT const documents_total,MTAPIRES *results);
  virtual MTAPIRES DocumentUpdate(IMTDocument *document);
  virtual MTAPIRES DocumentUpdateBatch(IMTDocumentArray *documents,MTAPIRES *results);
  virtual MTAPIRES DocumentUpdateBatchArray(IMTDocument **documents,UINT const documents_total,MTAPIRES *results);
  virtual MTAPIRES DocumentDelete(UINT64 const document_id);
  virtual MTAPIRES DocumentDeleteBatch(UINT64 const *document_ids,UINT const document_ids_total,MTAPIRES *results);
  virtual MTAPIRES DocumentRequest(UINT64 const document_id,IMTDocument *document);
  virtual MTAPIRES DocumentRequestByClient(UINT64 const client_id,IMTDocumentArray *documents);
  virtual MTAPIRES DocumentRequestHistory(UINT64 const document_id,UINT64 const author,INT64 const from,INT64 const to,IMTDocumentArray *history);
  virtual MTAPIRES DocumentReserved1();
  virtual MTAPIRES DocumentReserved2();
  virtual MTAPIRES DocumentReserved3();
  virtual MTAPIRES DocumentReserved4();
  virtual IMTComment *CommentCreate();
  virtual IMTCommentArray *CommentCreateArray();
  virtual MTAPIRES CommentAdd(IMTComment *comment);
  virtual MTAPIRES CommentAddBatch(IMTCommentArray *comments,MTAPIRES *results);
  virtual MTAPIRES CommentAddBatchArray(IMTComment **comments,UINT const comments_total,MTAPIRES *results);
  virtual MTAPIRES CommentUpdate(IMTComment *comment);
  virtual MTAPIRES CommentUpdateBatch(IMTCommentArray *comments,MTAPIRES *results);
  virtual MTAPIRES CommentUpdateBatchArray(IMTComment **comments,UINT const comments_total,MTAPIRES *results);
  virtual MTAPIRES CommentDelete(UINT64 const comment_id);
  virtual MTAPIRES CommentDeleteBatch(UINT64 const *comment_ids,UINT const comment_ids_total,MTAPIRES *results);
  virtual MTAPIRES CommentRequest(UINT64 const comment_id,IMTComment *comment);
  virtual MTAPIRES CommentRequestByClient(UINT64 const client_id,UINT const position,UINT const total,IMTCommentArray *comments);
  virtual MTAPIRES CommentRequestByDocument(UINT64 const document_id,UINT const position,UINT const total,IMTCommentArray *comments);
  virtual MTAPIRES CommentReserved1();
  virtual MTAPIRES CommentReserved2();
  virtual MTAPIRES CommentReserved3();
  virtual MTAPIRES CommentReserved4();
  virtual IMTAttachment *AttachmentCreate();
  virtual IMTAttachmentArray *AttachmentCreateArray();
  virtual MTAPIRES AttachmentAdd(IMTAttachment *attachment);
  virtual MTAPIRES AttachmentAddBatch(IMTAttachmentArray *attachments,MTAPIRES *results);
  virtual MTAPIRES AttachmentAddBatchArray(IMTAttachment **attachments,UINT const attachments_total,MTAPIRES *results);
  virtual MTAPIRES AttachmentRequest(UINT64 const *attachment_ids,UINT const attachment_ids_total,IMTAttachmentArray *attachments);
  virtual MTAPIRES AttachmentReserved1();
  virtual MTAPIRES AttachmentReserved2();
  virtual MTAPIRES AttachmentReserved3();
  virtual MTAPIRES AttachmentReserved4();
  virtual MTAPIRES UserAccountSubscribe(IMTAccountSink *sink);
  virtual MTAPIRES UserAccountUnsubscribe(IMTAccountSink *sink);
  virtual MTAPIRES UserRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTUserArray *users);
  virtual MTAPIRES UserGetByGroup(LPCWSTR mask,IMTUserArray *users);
  virtual MTAPIRES UserGetByLogins(UINT64 const *logins,UINT const logins_total,IMTUserArray *users);
  virtual MTAPIRES UserUpdateBatch(IMTUserArray *users,MTAPIRES *results);
  virtual MTAPIRES UserUpdateBatchArray(IMTUser **users,UINT const users_total,MTAPIRES *results);
  virtual IMTConSubscription *SubscriptionCfgCreate();
  virtual IMTConSubscriptionSymbol *SubscriptionCfgSymbolCreate();
  virtual IMTConSubscriptionNews *SubscriptionCfgNewsCreate();
  virtual MTAPIRES SubscriptionCfgSubscribe(IMTConSubscriptionSink *sink);
  virtual MTAPIRES SubscriptionCfgUnsubscribe(IMTConSubscriptionSink *sink);
  virtual UINT SubscriptionCfgTotal();
  virtual MTAPIRES SubscriptionCfgNext(UINT const pos,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgGet(LPCWSTR name,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgGetByID(UINT64 const id,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgRequest(LPCWSTR name,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgRequestByID(UINT64 const id,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgReserved1();
  virtual MTAPIRES SubscriptionCfgReserved2();
  virtual MTAPIRES SubscriptionCfgReserved3();
  virtual MTAPIRES SubscriptionCfgReserved4();
  virtual IMTSubscription *SubscriptionCreate();
  virtual IMTSubscriptionArray *SubscriptionCreateArray();
  virtual MTAPIRES SubscriptionJoin(UINT64 const login,UINT64 const subscription,IMTSubscription *record,IMTSubscriptionHistory *history);
  virtual MTAPIRES SubscriptionJoinBatch(UINT64 const *logins,UINT64 const *subscriptions,UINT const total,MTAPIRES *results,IMTSubscriptionArray *records,IMTSubscriptionHistoryArray *history);
  virtual MTAPIRES SubscriptionCancel(UINT64 const login,UINT64 const subscription,IMTSubscription *record,IMTSubscriptionHistory *history);
  virtual MTAPIRES SubscriptionCancelBatch(UINT64 const *logins,UINT64 const *subscriptions,UINT const total,MTAPIRES *results,IMTSubscriptionArray *records,IMTSubscriptionHistoryArray *history);
  virtual MTAPIRES SubscriptionUpdate(IMTSubscription *subscription);
  virtual MTAPIRES SubscriptionUpdateBatch(IMTSubscriptionArray *records,MTAPIRES *results);
  virtual MTAPIRES SubscriptionUpdateBatchArray(IMTSubscription **records,UINT const records_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionDelete(UINT64 const id);
  virtual MTAPIRES SubscriptionDeleteBatch(UINT64 const *ids,UINT const ids_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionRequest(UINT64 const login,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionRequestByID(UINT64 const id,IMTSubscription *record);
  virtual MTAPIRES SubscriptionRequestByGroup(LPCWSTR group,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionRequestByIDs(UINT64 const *ids,UINT const ids_total,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionReserved1();
  virtual MTAPIRES SubscriptionReserved2();
  virtual MTAPIRES SubscriptionReserved3();
  virtual MTAPIRES SubscriptionReserved4();
  virtual IMTSubscriptionHistory *SubscriptionHistoryCreate();
  virtual IMTSubscriptionHistoryArray *SubscriptionHistoryCreateArray();
  virtual MTAPIRES SubscriptionHistoryUpdate(IMTSubscriptionHistory *subscription);
  virtual MTAPIRES SubscriptionHistoryUpdateBatch(IMTSubscriptionHistoryArray *records,MTAPIRES *results);
  virtual MTAPIRES SubscriptionHistoryUpdateBatchArray(IMTSubscriptionHistory **records,UINT const records_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionHistoryDelete(UINT64 const id);
  virtual MTAPIRES SubscriptionHistoryDeleteBatch(UINT64 const *ids,UINT const ids_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionHistoryRequest(UINT64 const login,INT64 const from,INT64 const to,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryRequestByID(UINT64 const id,IMTSubscriptionHistory *record);
  virtual MTAPIRES SubscriptionHistoryRequestByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryRequestByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryRequestByIDs(UINT64 const *ids,UINT const ids_total,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryReserved1();
  virtual MTAPIRES SubscriptionHistoryReserved2();
  virtual MTAPIRES SubscriptionHistoryReserved3();
  virtual MTAPIRES SubscriptionHistoryReserved4();
  virtual MTAPIRES DealPerform(IMTDeal *deal);
  virtual MTAPIRES DealPerformBatch(IMTDealArray *deals,MTAPIRES *results);
  virtual MTAPIRES DealPerformBatchArray(IMTDeal **deals,UINT const deals_total,MTAPIRES *results);
  virtual MTAPIRES DealRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealReserved3();
  virtual MTAPIRES DealReserved4();
  virtual MTAPIRES UserDeleteBatch(UINT64 const *logins,UINT const logins_total,MTAPIRES *results);
  virtual MTAPIRES UserAccountRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTAccountArray *accounts);
  virtual MTAPIRES UserBalanceCheckBatch(UINT64 const *logins,UINT const logins_total,UINT const fixflag,MTAPIRES *results,double *balance_user,double *balance_history,double *credit_user,double *credit_history);
  virtual MTAPIRES UserAccountGetByGroup(LPCWSTR mask,IMTAccountArray *accounts);
  virtual MTAPIRES UserAccountGetByLogins(UINT64 const *logins,UINT const logins_total,IMTAccountArray *accounts);
  virtual MTAPIRES UserReserved5();
  virtual MTAPIRES UserReserved6();
  virtual MTAPIRES UserReserved7();
  virtual MTAPIRES OrderRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,IMTOrderArray *orders);
  virtual MTAPIRES OrderRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,IMTOrderArray *orders);
  virtual MTAPIRES OrderCancel(UINT64 const ticket);
  virtual MTAPIRES OrderCancelBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES OrderReserved3();
  virtual MTAPIRES OrderReserved4();
  virtual IMTConLeverage *LeverageCreate();
  virtual IMTConLeverageArray *LeverageCreateArray();
  virtual IMTConLeverageRule *LeverageRuleCreate();
  virtual IMTConLeverageTier *LeverageTierCreate();
  virtual MTAPIRES LeverageSubscribe(IMTConLeverageSink *sink);
  virtual MTAPIRES LeverageUnsubscribe(IMTConLeverageSink *sink);
  virtual UINT LeverageTotal();
  virtual MTAPIRES LeverageNext(UINT const pos,IMTConLeverage *cfg);
  virtual MTAPIRES LeverageGet(LPCWSTR name,IMTConLeverage *cfg);
  virtual MTAPIRES LeverageRequest(LPCWSTR name,IMTConLeverage *cfg);
  virtual MTAPIRES LeverageRequestArray(LPCWSTR groups_mask,IMTConLeverageArray *leverages);
  virtual MTAPIRES LeverageReserved1();
  virtual MTAPIRES LeverageReserved2();
  virtual MTAPIRES LeverageReserved3();
  virtual MTAPIRES LeverageReserved4();
  virtual IMTGeo *GeoCreate();
  virtual MTAPIRES GeoResolve(LPCWSTR address,UINT const flags,IMTGeo *record);
  virtual MTAPIRES GeoResolveBatch(LPCWSTR *addresses,UINT addresses_total,UINT const flags,IMTGeo **records,MTAPIRES *results);
  virtual MTAPIRES GeoResolveReserved1();
  virtual MTAPIRES GeoResolveReserved2();
  virtual MTAPIRES GeoResolveReserved3();
  virtual MTAPIRES GeoResolveReserved4();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTAdminAPI : public IMTAdminAPI
{
 public:
  SwigDirector_IMTAdminAPI(int swig_p);
  virtual void Release();
  virtual MTAPIRES LicenseCheck(MTLicenseCheck &check);
  virtual void *Allocate(UINT const bytes);
  virtual void Free(void *ptr);
  virtual void ProxySet(MTProxyInfo const &proxy);
  virtual MTAPIRES Connect(LPCWSTR server,UINT64 login,LPCWSTR password,LPCWSTR password_cert,UINT64 pump_mode,UINT timeout);
  virtual MTAPIRES Connect(LPCWSTR server,UINT64 login,LPCWSTR password,LPCWSTR password_cert,UINT64 pump_mode);
  virtual void Disconnect();
  virtual MTAPIRES Subscribe(IMTManagerSink *sink);
  virtual MTAPIRES Unsubscribe(IMTManagerSink *sink);
  virtual MTAPIRES ServerActivate();
  virtual MTAPIRES ServerLiveUpdate();
  virtual MTAPIRES LoggerOut(UINT const code,LPCWSTR format,...arg2);
  virtual void LoggerFlush();
  virtual MTAPIRES LoggerServerRequest(UINT64 const server_id,UINT const mode,UINT const type,INT64 const from,INT64 const to,LPCWSTR filter,MTLogRecord *&records,UINT &records_total);
  virtual MTAPIRES LoggerGatewayRequest(UINT const gateway_pos,INT64 const from,INT64 const to,LPCWSTR filter,MTLogRecord *&records,UINT &records_total);
  virtual MTAPIRES LoggerFeederRequest(UINT const feeder_pos,INT64 const from,INT64 const to,LPCWSTR filter,MTLogRecord *&records,UINT &records_total);
  virtual MTAPIRES LoggerOutString(UINT const code,LPCWSTR string);
  virtual MTAPIRES LoggerReserved2();
  virtual MTAPIRES LoggerReserved3();
  virtual MTAPIRES LoggerReserved4();
  virtual IMTConCommon *CommonCreate();
  virtual MTAPIRES CommonSubscribe(IMTConCommonSink *sink);
  virtual MTAPIRES CommonUnsubscribe(IMTConCommonSink *sink);
  virtual MTAPIRES CommonGet(IMTConCommon *common);
  virtual MTAPIRES CommonSet(IMTConCommon *common);
  virtual IMTConAccountAllocation *CommonCreateAllocation();
  virtual IMTConAccountAgreement *CommonCreateAgreement();
  virtual MTAPIRES CommonReserved3();
  virtual MTAPIRES CommonReserved4();
  virtual IMTConServer *NetServerCreate();
  virtual IMTConServerRange *NetServerRangeCreate();
  virtual MTAPIRES NetServerSubscribe(IMTConServerSink *sink);
  virtual MTAPIRES NetServerUnsubscribe(IMTConServerSink *sink);
  virtual MTAPIRES NetServerRestart(UINT64 const id);
  virtual MTAPIRES NetServerUpdate(IMTConServer *config);
  virtual MTAPIRES NetServerDelete(UINT const pos);
  virtual MTAPIRES NetServerShift(UINT const pos,int const shift);
  virtual UINT NetServerTotal();
  virtual MTAPIRES NetServerNext(UINT const pos,IMTConServer *config);
  virtual MTAPIRES NetServerGet(UINT64 const id,IMTConServer *config);
  virtual MTAPIRES NetServerUpdateBatch(IMTConServer **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES NetServerDeleteBatch(IMTConServer **configs,UINT const config_total,MTAPIRES *results);
  virtual IMTConAddressRange *NetServerAddressRangeCreate();
  virtual IMTConClusterState *NetServerClusterStateCreate();
  virtual IMTConFirewall *FirewallCreate();
  virtual MTAPIRES FirewallSubscribe(IMTConFirewallSink *sink);
  virtual MTAPIRES FirewallUnsubscribe(IMTConFirewallSink *sink);
  virtual MTAPIRES FirewallUpdate(IMTConFirewall *config);
  virtual MTAPIRES FirewallDelete(UINT const pos);
  virtual MTAPIRES FirewallShift(UINT const pos,int const shift);
  virtual UINT FirewallTotal();
  virtual MTAPIRES FirewallNext(UINT const pos,IMTConFirewall *config);
  virtual MTAPIRES FirewallUpdateBatch(IMTConFirewall **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES FirewallDeleteBatch(IMTConFirewall **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES FirewallReserved3();
  virtual MTAPIRES FirewallReserved4();
  virtual IMTConTime *TimeCreate();
  virtual MTAPIRES TimeSubscribe(IMTConTimeSink *sink);
  virtual MTAPIRES TimeUnsubscribe(IMTConTimeSink *sink);
  virtual MTAPIRES TimeGet(IMTConTime *config);
  virtual MTAPIRES TimeSet(IMTConTime *config);
  virtual INT64 TimeServer();
  virtual MTAPIRES TimeServerRequest(INT64 &time_msc);
  virtual MTAPIRES TimeReserved2();
  virtual MTAPIRES TimeReserved3();
  virtual MTAPIRES TimeReserved4();
  virtual IMTConHoliday *HolidayCreate();
  virtual MTAPIRES HolidaySubscribe(IMTConHolidaySink *sink);
  virtual MTAPIRES HolidayUnsubscribe(IMTConHolidaySink *sink);
  virtual MTAPIRES HolidayUpdate(IMTConHoliday *config);
  virtual MTAPIRES HolidayDelete(UINT const pos);
  virtual MTAPIRES HolidayShift(UINT const pos,int const shift);
  virtual UINT HolidayTotal();
  virtual MTAPIRES HolidayNext(UINT const pos,IMTConHoliday *config);
  virtual MTAPIRES HolidayUpdateBatch(IMTConHoliday **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES HolidayDeleteBatch(IMTConHoliday **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES HolidayReserved3();
  virtual MTAPIRES HolidayReserved4();
  virtual IMTConGroup *GroupCreate();
  virtual IMTConGroupSymbol *GroupSymbolCreate();
  virtual IMTConCommission *GroupCommissionCreate();
  virtual IMTConCommTier *GroupTierCreate();
  virtual MTAPIRES GroupSubscribe(IMTConGroupSink *sink);
  virtual MTAPIRES GroupUnsubscribe(IMTConGroupSink *sink);
  virtual MTAPIRES GroupUpdate(IMTConGroup *group);
  virtual MTAPIRES GroupDelete(LPCWSTR name);
  virtual MTAPIRES GroupDelete(UINT const pos);
  virtual MTAPIRES GroupShift(UINT const pos,int const shift);
  virtual UINT GroupTotal();
  virtual MTAPIRES GroupNext(UINT const pos,IMTConGroup *group);
  virtual MTAPIRES GroupGet(LPCWSTR name,IMTConGroup *group);
  virtual MTAPIRES GroupUpdateBatch(IMTConGroup **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES GroupDeleteBatch(IMTConGroup **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES GroupReserved3();
  virtual MTAPIRES GroupReserved4();
  virtual IMTConManager *ManagerCreate();
  virtual IMTConManagerAccess *ManagerAccessCreate();
  virtual MTAPIRES ManagerSubscribe(IMTConManagerSink *sink);
  virtual MTAPIRES ManagerUnsubscribe(IMTConManagerSink *sink);
  virtual MTAPIRES ManagerUpdate(IMTConManager *manager);
  virtual MTAPIRES ManagerDelete(UINT const pos);
  virtual MTAPIRES ManagerShift(UINT const pos,int const shift);
  virtual UINT ManagerTotal();
  virtual MTAPIRES ManagerNext(UINT const pos,IMTConManager *manager);
  virtual MTAPIRES ManagerGet(UINT64 const login,IMTConManager *manager);
  virtual MTAPIRES ManagerUpdateBatch(IMTConManager **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES ManagerDeleteBatch(IMTConManager **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES ManagerCurrent(IMTConManager *manager);
  virtual IMTConManagerReport *ManagerReportCreate();
  virtual IMTConRoute *RouteCreate();
  virtual IMTConCondition *RouteConditionCreate();
  virtual IMTConRouteDealer *RouteDealerCreate();
  virtual MTAPIRES RouteSubscribe(IMTConRouteSink *sink);
  virtual MTAPIRES RouteUnsubscribe(IMTConRouteSink *sink);
  virtual MTAPIRES RouteUpdate(IMTConRoute *route);
  virtual MTAPIRES RouteDelete(LPCWSTR name);
  virtual MTAPIRES RouteDelete(UINT const pos);
  virtual MTAPIRES RouteShift(UINT const pos,int const shift);
  virtual UINT RouteTotal();
  virtual MTAPIRES RouteNext(UINT const pos,IMTConRoute *route);
  virtual MTAPIRES RouteGet(LPCWSTR name,IMTConRoute *route);
  virtual MTAPIRES RouteUpdateBatch(IMTConRoute **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES RouteDeleteBatch(IMTConRoute **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES RouteReserved3();
  virtual MTAPIRES RouteReserved4();
  virtual IMTConGateway *GatewayCreate();
  virtual IMTConGatewayModule *GatewayModuleCreate();
  virtual IMTConParam *GatewayParamCreate();
  virtual IMTConGatewayTranslate *GatewayTranslateCreate();
  virtual MTAPIRES GatewaySubscribe(IMTConGatewaySink *sink);
  virtual MTAPIRES GatewayUnsubscribe(IMTConGatewaySink *sink);
  virtual MTAPIRES GatewayRestart();
  virtual MTAPIRES GatewayUpdate(IMTConGateway *gateway);
  virtual MTAPIRES GatewayDelete(LPCWSTR name);
  virtual MTAPIRES GatewayDelete(UINT const pos);
  virtual MTAPIRES GatewayShift(UINT const pos,int const shift);
  virtual UINT GatewayTotal();
  virtual MTAPIRES GatewayNext(UINT const pos,IMTConGateway *gateway);
  virtual MTAPIRES GatewayGet(LPCWSTR name,IMTConGateway *gateway);
  virtual UINT GatewayModuleTotal();
  virtual MTAPIRES GatewayModuleNext(UINT const pos,IMTConGatewayModule *module);
  virtual MTAPIRES GatewayModuleGet(LPCWSTR name,IMTConGatewayModule *module);
  virtual MTAPIRES GatewayPositionRequest(UINT64 gateway_id,IMTPositionArray *positions,INT64 &positions_time);
  virtual MTAPIRES GatewayUpdateBatch(IMTConGateway **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES GatewayDeleteBatch(IMTConGateway **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES GatewayReserved3();
  virtual IMTConPlugin *PluginCreate();
  virtual IMTConPluginModule *PluginModuleCreate();
  virtual IMTConParam *PluginParamCreate();
  virtual MTAPIRES PluginSubscribe(IMTConPluginSink *sink);
  virtual MTAPIRES PluginUnsubscribe(IMTConPluginSink *sink);
  virtual MTAPIRES PluginUpdate(IMTConPlugin *plugin);
  virtual MTAPIRES PluginDelete(UINT64 const server_id,LPCWSTR name);
  virtual MTAPIRES PluginDelete(UINT const pos);
  virtual MTAPIRES PluginShift(UINT const pos,int const shift);
  virtual UINT PluginTotal();
  virtual MTAPIRES PluginNext(UINT const pos,IMTConPlugin *plugin);
  virtual MTAPIRES PluginGet(UINT64 const server_id,LPCWSTR name,IMTConPlugin *plugin);
  virtual UINT PluginModuleTotal();
  virtual MTAPIRES PluginModuleNext(UINT const pos,IMTConPluginModule *module);
  virtual MTAPIRES PluginModuleGet(UINT64 const server_id,LPCWSTR name,IMTConPluginModule *module);
  virtual MTAPIRES PluginUpdateBatch(IMTConPlugin **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES PluginDeleteBatch(IMTConPlugin **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES PluginReserved3();
  virtual MTAPIRES PluginReserved4();
  virtual IMTConFeeder *FeederCreate();
  virtual IMTConFeederModule *FeederModuleCreate();
  virtual IMTConParam *FeederParamCreate();
  virtual IMTConFeederTranslate *FeederTranslateCreate();
  virtual MTAPIRES FeederSubscribe(IMTConFeederSink *sink);
  virtual MTAPIRES FeederUnsubscribe(IMTConFeederSink *sink);
  virtual MTAPIRES FeederRestart();
  virtual MTAPIRES FeederUpdate(IMTConFeeder *feeder);
  virtual MTAPIRES FeederDelete(LPCWSTR name);
  virtual MTAPIRES FeederDelete(UINT const pos);
  virtual MTAPIRES FeederShift(UINT const pos,int const shift);
  virtual UINT FeederTotal();
  virtual MTAPIRES FeederNext(UINT const pos,IMTConFeeder *feeder);
  virtual MTAPIRES FeederGet(LPCWSTR name,IMTConFeeder *feeder);
  virtual UINT FeederModuleTotal();
  virtual MTAPIRES FeederModuleNext(UINT const pos,IMTConFeederModule *module);
  virtual MTAPIRES FeederModuleGet(LPCWSTR name,IMTConFeederModule *module);
  virtual MTAPIRES FeederUpdateBatch(IMTConFeeder **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES FeederDeleteBatch(IMTConFeeder **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES FeederReserved3();
  virtual MTAPIRES FeederReserved4();
  virtual IMTConReport *ReportCreate();
  virtual IMTConReportModule *ReportModuleCreate();
  virtual IMTConParam *ReportParamCreate();
  virtual MTAPIRES ReportSubscribe(IMTConReportSink *sink);
  virtual MTAPIRES ReportUnsubscribe(IMTConReportSink *sink);
  virtual MTAPIRES ReportUpdate(IMTConReport *report);
  virtual MTAPIRES ReportDelete(UINT64 const server_id,LPCWSTR name);
  virtual MTAPIRES ReportDelete(UINT const pos);
  virtual MTAPIRES ReportShift(UINT const pos,int const shift);
  virtual UINT ReportTotal();
  virtual MTAPIRES ReportNext(UINT const pos,IMTConReport *report);
  virtual MTAPIRES ReportGet(UINT64 const server_id,LPCWSTR name,IMTConReport *report);
  virtual UINT ReportModuleTotal();
  virtual MTAPIRES ReportModuleNext(UINT const pos,IMTConReportModule *module);
  virtual MTAPIRES ReportModuleGet(UINT64 const server_id,LPCWSTR name,IMTConReportModule *module);
  virtual MTAPIRES ReportUpdateBatch(IMTConReport **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES ReportDeleteBatch(IMTConReport **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES ReportReserved3();
  virtual MTAPIRES ReportReserved4();
  virtual IMTConSymbol *SymbolCreate();
  virtual IMTConSymbolSession *SymbolSessionCreate();
  virtual MTAPIRES SymbolSubscribe(IMTConSymbolSink *sink);
  virtual MTAPIRES SymbolUnsubscribe(IMTConSymbolSink *sink);
  virtual MTAPIRES SymbolUpdate(IMTConSymbol *symbol);
  virtual MTAPIRES SymbolDelete(LPCWSTR name);
  virtual MTAPIRES SymbolDelete(UINT const pos);
  virtual MTAPIRES SymbolShift(UINT const pos,int const shift);
  virtual UINT SymbolTotal();
  virtual MTAPIRES SymbolNext(UINT const pos,IMTConSymbol *symbol);
  virtual MTAPIRES SymbolGet(LPCWSTR name,IMTConSymbol *symbol);
  virtual MTAPIRES SymbolExist(IMTConSymbol const *symbol,IMTConGroup const *group);
  virtual MTAPIRES SymbolUpdateBatch(IMTConSymbol **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES SymbolDeleteBatch(IMTConSymbol **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES SymbolReserved3();
  virtual MTAPIRES SymbolReserved4();
  virtual IMTConHistorySync *HistorySyncCreate();
  virtual MTAPIRES HistorySyncSubscribe(IMTConHistorySyncSink *sink);
  virtual MTAPIRES HistorySyncUnsubscribe(IMTConHistorySyncSink *sink);
  virtual MTAPIRES HistorySyncStart();
  virtual MTAPIRES HistorySyncUpdate(IMTConHistorySync *config);
  virtual MTAPIRES HistorySyncDelete(UINT const pos);
  virtual MTAPIRES HistorySyncShift(UINT const pos,int const shift);
  virtual UINT HistorySyncTotal();
  virtual MTAPIRES HistorySyncNext(UINT const pos,IMTConHistorySync *config);
  virtual MTAPIRES HistorySyncUpdateBatch(IMTConHistorySync **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES HistorySyncDeleteBatch(IMTConHistorySync **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES HistorySyncReserved3();
  virtual MTAPIRES HistorySyncReserved4();
  virtual IMTUser *UserCreate();
  virtual IMTUserArray *UserCreateArray();
  virtual MTAPIRES UserAdd(IMTUser *user,LPCWSTR master_pass,LPCWSTR investor_pass);
  virtual MTAPIRES UserDelete(UINT64 const login);
  virtual MTAPIRES UserUpdate(IMTUser *user);
  virtual MTAPIRES UserRequest(UINT64 const login,IMTUser *user);
  virtual MTAPIRES UserPasswordCheck(UINT const type,UINT64 const login,LPCWSTR password);
  virtual MTAPIRES UserPasswordChange(UINT const type,UINT64 const login,LPCWSTR password);
  virtual MTAPIRES UserCertDelete(UINT64 const login);
  virtual MTAPIRES UserCertConfirm(UINT64 const login);
  virtual MTAPIRES UserExternalSync(UINT64 const login,UINT64 const gateway_id,LPCWSTR account_id,UINT sync_mode);
  virtual MTAPIRES UserArchive(UINT64 const login);
  virtual MTAPIRES UserArchiveRequest(UINT64 const login,IMTUser *user);
  virtual MTAPIRES UserBackupRequest(INT64 const backup,UINT64 const login,IMTUser *user);
  virtual MTAPIRES UserBackupList(INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES UserRestore(IMTUser *user);
  virtual IMTCertificate *UserCertCreate();
  virtual MTAPIRES UserCertUpdate(UINT64 const login,IMTCertificate const *certificate);
  virtual MTAPIRES UserCertGet(UINT64 const login,IMTCertificate *certificate);
  virtual MTAPIRES UserBalanceCheck(UINT64 const login,UINT const fixflag,double &balance_user,double &balance_history,double &credit_user,double &credit_history);
  virtual IMTDeal *DealCreate();
  virtual IMTDealArray *DealCreateArray();
  virtual MTAPIRES DealRequest(UINT64 const ticket,IMTDeal *deal);
  virtual MTAPIRES DealRequest(UINT64 const login,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealDelete(UINT64 const ticket);
  virtual MTAPIRES DealUpdate(IMTDeal *deal);
  virtual MTAPIRES DealBackupList(INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES DealBackupRequest(INT64 const backup,UINT64 const ticket,IMTDeal *deal);
  virtual MTAPIRES DealBackupRequest(INT64 const backup,UINT64 const login,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealBackupRestore(IMTDeal *deal);
  virtual MTAPIRES DealBackupList(UINT64 const server,INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES DealBackupRequest(UINT64 const server,INT64 const backup,UINT64 const ticket,IMTDeal *deal);
  virtual MTAPIRES DealBackupRequest(UINT64 const server,INT64 const backup,UINT64 const login,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealRequestByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual IMTPosition *PositionCreate();
  virtual IMTPositionArray *PositionCreateArray();
  virtual MTAPIRES PositionRequest(UINT64 const login,IMTPositionArray *positions);
  virtual MTAPIRES PositionDelete(IMTPosition *position);
  virtual MTAPIRES PositionUpdate(IMTPosition *position);
  virtual MTAPIRES PositionBackupList(INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES PositionBackupRequest(INT64 const backup,UINT64 const login,IMTPositionArray *positions);
  virtual MTAPIRES PositionBackupRestore(IMTPosition *position);
  virtual MTAPIRES PositionBackupList(UINT64 const server,INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES PositionBackupRequest(UINT64 const server,INT64 const backup,UINT64 const login,IMTPositionArray *positions);
  virtual MTAPIRES PositionCheck(UINT64 const login,IMTPositionArray *current,IMTPositionArray *invalid,IMTPositionArray *missed,IMTPositionArray *nonexist);
  virtual MTAPIRES PositionFix(UINT64 const login,IMTPositionArray *current);
  virtual IMTOrder *OrderCreate();
  virtual IMTOrderArray *OrderCreateArray();
  virtual MTAPIRES OrderRequest(UINT64 const ticket,IMTOrder *order);
  virtual MTAPIRES OrderRequestOpen(UINT64 const login,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequest(UINT64 const login,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES OrderDelete(UINT64 const ticket);
  virtual MTAPIRES OrderUpdate(IMTOrder *order);
  virtual MTAPIRES OrderBackupList(INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES OrderBackupRequest(INT64 const backup,UINT64 const ticket,IMTOrder *order);
  virtual MTAPIRES OrderBackupRequestOpen(INT64 const backup,UINT64 const login,IMTOrderArray *orders);
  virtual MTAPIRES OrderBackupRequestHistory(INT64 const backup,UINT64 const login,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES OrderBackupRestore(IMTOrder *order);
  virtual MTAPIRES OrderBackupList(UINT64 const server,INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES OrderBackupRequest(UINT64 const server,INT64 const backup,UINT64 const ticket,IMTOrder *order);
  virtual MTAPIRES OrderBackupRequestOpen(UINT64 const server,INT64 const backup,UINT64 const login,IMTOrderArray *orders);
  virtual MTAPIRES OrderBackupRequestHistory(UINT64 const server,INT64 const backup,UINT64 const login,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES TickRequest(LPCWSTR symbol,INT64 const from,INT64 const to,MTTickShort *&ticks,UINT &ticks_total);
  virtual MTAPIRES TickRequestRaw(LPCWSTR symbol,INT64 const from,INT64 const to,MTTickShort *&ticks,UINT &ticks_total);
  virtual MTAPIRES TickAdd(LPCWSTR symbol,MTTickShort const *ticks,UINT const ticks_total);
  virtual MTAPIRES TickReplace(LPCWSTR symbol,INT64 const from_msc,INT64 const to_msc,MTTickShort const *ticks,UINT const ticks_total);
  virtual MTAPIRES TickReserved3();
  virtual MTAPIRES TickReserved4();
  virtual MTAPIRES ChartRequest(LPCWSTR symbol,INT64 const from,INT64 const to,MTChartBar *&bars,UINT &bars_total);
  virtual MTAPIRES ChartDelete(LPCWSTR symbol,INT64 const *bars_dates,UINT const bars_total);
  virtual MTAPIRES ChartUpdate(LPCWSTR symbol,MTChartBar const *bars,UINT const bars_total);
  virtual MTAPIRES ChartReplace(LPCWSTR symbol,INT64 const from,INT64 const to,MTChartBar const *bars,UINT const bars_total);
  virtual MTAPIRES ChartSplit(LPCWSTR symbol,UINT const new_shares,UINT const old_shares,UINT const rounding_rule,INT64 const datetime_from,INT64 const datetime_to);
  virtual MTAPIRES ChartReserved2();
  virtual MTAPIRES ChartReserved3();
  virtual IMTMail *MailCreate();
  virtual MTAPIRES MailSubscribe(IMTMailSink *sink);
  virtual MTAPIRES MailUnsubscribe(IMTMailSink *sink);
  virtual UINT MailTotal();
  virtual MTAPIRES MailNext(UINT const pos,IMTMail *mail);
  virtual MTAPIRES MailDelete(UINT const pos);
  virtual MTAPIRES MailDeleteId(UINT64 const id);
  virtual MTAPIRES MailSend(IMTMail *mail);
  virtual MTAPIRES MailBodyRequest(UINT64 const id,IMTMail *mail);
  virtual MTAPIRES MailReserved2();
  virtual MTAPIRES MailReserved3();
  virtual MTAPIRES MailReserved4();
  virtual IMTNews *NewsCreate();
  virtual MTAPIRES NewsSubscribe(IMTNewsSink *sink);
  virtual MTAPIRES NewsUnsubscribe(IMTNewsSink *sink);
  virtual MTAPIRES NewsSend(IMTNews *news);
  virtual UINT NewsTotal();
  virtual MTAPIRES NewsNext(UINT const pos,IMTNews *news);
  virtual MTAPIRES NewsBodyRequest(UINT64 const id,IMTNews *news);
  virtual MTAPIRES NewsReserved4();
  virtual MTAPIRES UserExternalRequest(UINT64 const gateway_id,LPCWSTR account,IMTUser *user);
  virtual MTAPIRES UserExternalRequest(LPCWSTR account,IMTUser *user);
  virtual MTAPIRES UserBackupRequest(UINT64 const server,INT64 const backup,UINT64 const login,IMTUser *user);
  virtual MTAPIRES UserBackupList(UINT64 const server,INT64 const from,INT64 const to,INT64 *&backups,UINT &backups_total);
  virtual MTAPIRES UserLogins(LPCWSTR group,UINT64 *&logins,UINT &logins_total);
  virtual MTAPIRES UserRequestArray(LPCWSTR group,IMTUserArray *users);
  virtual MTAPIRES PasswordChange(UINT const type,LPCWSTR password);
  virtual MTAPIRES PasswordReserved1();
  virtual MTAPIRES PasswordReserved2();
  virtual IMTConSpread *SpreadCreate();
  virtual IMTConSpreadLeg *SpreadLegCreate();
  virtual MTAPIRES SpreadSubscribe(IMTConSpreadSink *sink);
  virtual MTAPIRES SpreadUnsubscribe(IMTConSpreadSink *sink);
  virtual MTAPIRES SpreadUpdate(IMTConSpread *spread);
  virtual MTAPIRES SpreadDelete(UINT const pos);
  virtual MTAPIRES SpreadShift(UINT const pos,int const shift);
  virtual UINT SpreadTotal();
  virtual MTAPIRES SpreadNext(UINT const pos,IMTConSpread *spread);
  virtual MTAPIRES SpreadUpdateBatch(IMTConSpread **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES SpreadDeleteBatch(IMTConSpread **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES SpreadReserved3();
  virtual MTAPIRES SpreadReserved4();
  virtual MTAPIRES NetworkRescan(UINT const flags,UINT const timeout);
  virtual UINT64 NetworkBytesSent();
  virtual UINT64 NetworkBytesRead();
  virtual MTAPIRES NetworkServer(MTAPISTR &server);
  virtual MTAPIRES NetworkAddress(MTAPISTR &address);
  virtual MTAPIRES NetworkReserved1();
  virtual MTAPIRES NetworkReserved2();
  virtual MTAPIRES NetworkReserved3();
  virtual MTAPIRES NetworkReserved4();
  virtual MTAPIRES OrderReopen(UINT64 const ticket);
  virtual MTAPIRES OrderRequestByGroup(LPCWSTR group,IMTOrderArray *orders);
  virtual MTAPIRES OrderRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTOrderArray *orders);
  virtual MTAPIRES OrderRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTOrderArray *orders);
  virtual MTAPIRES OrderUpdateBatch(IMTOrderArray *orders,MTAPIRES *results);
  virtual MTAPIRES NotificationsSend(LPWSTR metaquotes_ids,LPCWSTR message);
  virtual MTAPIRES NotificationsSend(UINT64 const *logins,UINT const logins_total,LPCWSTR message);
  virtual MTAPIRES NotificationsReserved1();
  virtual MTAPIRES NotificationsReserved2();
  virtual MTAPIRES NotificationsReserved3();
  virtual MTAPIRES NotificationsReserved4();
  virtual MTAPIRES SettingGet(LPCWSTR section,LPCWSTR key,LPVOID &outdata,UINT &outdata_len);
  virtual MTAPIRES SettingSet(LPCWSTR section,LPCWSTR key,LPVOID const indata,UINT const indata_len);
  virtual MTAPIRES SettingDelete(LPCWSTR section,LPCWSTR key);
  virtual MTAPIRES SettingReserved1();
  virtual MTAPIRES SettingReserved2();
  virtual MTAPIRES SettingReserved3();
  virtual MTAPIRES SettingReserved4();
  virtual IMTConEmail *EmailCreate();
  virtual MTAPIRES EmailSubscribe(IMTConEmailSink *sink);
  virtual MTAPIRES EmailUnsubscribe(IMTConEmailSink *sink);
  virtual MTAPIRES EmailUpdate(IMTConEmail *email);
  virtual MTAPIRES EmailDelete(LPCWSTR name);
  virtual MTAPIRES EmailDelete(UINT const pos);
  virtual MTAPIRES EmailShift(UINT const pos,int const shift);
  virtual UINT EmailTotal();
  virtual MTAPIRES EmailNext(UINT const pos,IMTConEmail *email);
  virtual MTAPIRES EmailGet(LPCWSTR name,IMTConEmail *email);
  virtual MTAPIRES EmailUpdateBatch(IMTConEmail **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES EmailDeleteBatch(IMTConEmail **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES EmailSend(LPCWSTR account,LPCWSTR to,LPCWSTR to_name,LPCWSTR subject,LPCWSTR body);
  virtual MTAPIRES EmailReserved2();
  virtual MTAPIRES EmailReserved3();
  virtual MTAPIRES EmailReserved4();
  virtual IMTConMessenger *MessengerCreate();
  virtual MTAPIRES MessengerSubscribe(IMTConMessengerSink *sink);
  virtual MTAPIRES MessengerUnsubscribe(IMTConMessengerSink *sink);
  virtual MTAPIRES MessengerUpdate(IMTConMessenger *messenger);
  virtual MTAPIRES MessengerDelete(LPCWSTR name);
  virtual MTAPIRES MessengerDelete(UINT const pos);
  virtual MTAPIRES MessengerShift(UINT const pos,int const shift);
  virtual UINT MessengerTotal();
  virtual MTAPIRES MessengerNext(UINT const pos,IMTConMessenger *messenger);
  virtual MTAPIRES MessengerGet(LPCWSTR name,IMTConMessenger *messenger);
  virtual MTAPIRES MessengerUpdateBatch(IMTConMessenger **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES MessengerDeleteBatch(IMTConMessenger **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES MessengerSend(LPCWSTR destination,LPCWSTR group,LPCWSTR sender,LPCWSTR text);
  virtual MTAPIRES MessengerVerifyPhone(LPCWSTR phone_number);
  virtual IMTConMessengerCountry *MessengerCountryCreate();
  virtual IMTConMessengerGroup *MessengerGroupCreate();
  virtual MTAPIRES DealRequestByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTDealArray *deals);
  virtual MTAPIRES DealUpdateBatch(IMTDealArray *deals,MTAPIRES *results);
  virtual MTAPIRES DealUpdateBatchArray(IMTDeal **deals,UINT const deals_total,MTAPIRES *results);
  virtual MTAPIRES DealDeleteBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES DealRequestPage(UINT64 const login,INT64 const from,INT64 const to,UINT const offset,UINT const total,IMTDealArray *deals);
  virtual MTAPIRES DealAdd(IMTDeal *deal);
  virtual MTAPIRES DealAddBatch(IMTDealArray *deals,MTAPIRES *results);
  virtual MTAPIRES DealAddBatchArray(IMTDeal **deals,UINT const deals_total,MTAPIRES *results);
  virtual MTAPIRES PositionRequestByGroup(LPCWSTR group,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTPositionArray *positions);
  virtual MTAPIRES PositionUpdateBatch(IMTPositionArray *positions,MTAPIRES *results);
  virtual MTAPIRES PositionUpdateBatchArray(IMTPosition **positions,UINT const positions_total,MTAPIRES *results);
  virtual MTAPIRES PositionDeleteBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES PositionDeleteByTicket(UINT64 const ticket);
  virtual MTAPIRES PositionSplit(UINT64 const *tickets,UINT const tickets_total,double const *adjustments,UINT const new_shares,UINT const old_shares,UINT const round_rule_price,UINT const round_rule_volume,UINT const flags,MTAPIRES *results);
  virtual MTAPIRES PositionRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,IMTPositionArray *positions);
  virtual MTAPIRES PositionRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,IMTPositionArray *positions);
  virtual MTAPIRES PositionReserved4();
  virtual MTAPIRES OrderUpdateBatchArray(IMTOrder **orders,UINT const orders_total,MTAPIRES *results);
  virtual MTAPIRES OrderDeleteBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES OrderAdd(IMTOrder *order);
  virtual MTAPIRES OrderAddBatch(IMTOrderArray *orders,MTAPIRES *results);
  virtual MTAPIRES OrderAddBatchArray(IMTOrder **orders,UINT const orders_total,MTAPIRES *results);
  virtual MTAPIRES OrderRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestPage(UINT64 const login,INT64 const from,INT64 const to,UINT const offset,UINT const total,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,INT64 const from,INT64 const to,IMTOrderArray *orders);
  virtual MTAPIRES HistoryReserved4();
  virtual MTAPIRES TLSCertificateUpdate(void const *pfx_certificate,UINT const pfx_certificate_size,LPCWSTR password);
  virtual MTAPIRES TLSCertificateDelete(UINT const pos);
  virtual MTAPIRES TLSCertificateShift(UINT const pos,int const shift);
  virtual UINT TLSCertificateTotal();
  virtual MTAPIRES TLSCertificateNext(UINT const pos,MTAPISTR &name,MTAPISTR &thumbprint);
  virtual MTAPIRES TLSCertificateReserved1();
  virtual MTAPIRES TLSCertificateReserved2();
  virtual MTAPIRES TLSCertificateReserved3();
  virtual MTAPIRES TLSCertificateReserved4();
  virtual IMTECNMatching *ECNCreateMatching();
  virtual IMTECNMatchingArray *ECNCreateMatchingArray();
  virtual IMTECNFilling *ECNCreateFilling();
  virtual IMTECNFillingArray *ECNCreateFillingArray();
  virtual IMTECNProvider *ECNCreateProvider();
  virtual IMTECNProviderArray *ECNCreateProviderArray();
  virtual IMTECNHistoryMatching *ECNCreateHistoryMatching();
  virtual IMTECNHistoryMatchingArray *ECNCreateHistoryMatchingArray();
  virtual IMTECNHistoryFilling *ECNCreateHistoryFilling();
  virtual IMTECNHistoryFillingArray *ECNCreateHistoryFillingArray();
  virtual IMTECNHistoryDeal *ECNCreateHistoryDeal();
  virtual IMTECNHistoryDealArray *ECNCreateHistoryDealArray();
  virtual MTAPIRES ECNRequestByGroup(LPCWSTR mask,IMTECNMatchingArray *matching,IMTECNFillingArray *filling,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTECNMatchingArray *matching,IMTECNFillingArray *filling,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestByTickets(UINT64 const *tickets,UINT const tickets_total,IMTECNMatchingArray *matching,IMTECNFillingArray *filling,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestHistoryByGroup(LPCWSTR mask,INT64 const from,INT64 const to,IMTECNHistoryMatchingArray *matching,IMTECNHistoryFillingArray *filling,IMTECNHistoryDealArray *deals,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestHistoryByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTECNHistoryMatchingArray *matching,IMTECNHistoryFillingArray *filling,IMTECNHistoryDealArray *deals,IMTECNProviderArray *providers);
  virtual MTAPIRES ECNRequestHistoryByTickets(UINT64 const *tickets,UINT const tickets_total,INT64 const from,INT64 const to,IMTECNHistoryMatchingArray *matching,IMTECNHistoryFillingArray *filling,IMTECNHistoryDealArray *deals,IMTECNProviderArray *providers);
  virtual IMTClient *ClientCreate();
  virtual IMTClientArray *ClientCreateArray();
  virtual MTAPIRES ClientAdd(IMTClient *client);
  virtual MTAPIRES ClientAddBatch(IMTClientArray *clients,MTAPIRES *results);
  virtual MTAPIRES ClientAddBatchArray(IMTClient **clients,UINT const clients_total,MTAPIRES *results);
  virtual MTAPIRES ClientUpdate(IMTClient *client);
  virtual MTAPIRES ClientUpdateBatch(IMTClientArray *clients,MTAPIRES *results);
  virtual MTAPIRES ClientUpdateBatchArray(IMTClient **clients,UINT const clients_total,MTAPIRES *results);
  virtual MTAPIRES ClientDelete(UINT64 const client_id);
  virtual MTAPIRES ClientDeleteBatch(UINT64 const *client_ids,UINT const client_ids_total,MTAPIRES *results);
  virtual MTAPIRES ClientRequest(UINT64 const client_id,IMTClient *client);
  virtual MTAPIRES ClientRequestByGroup(LPCWSTR groups,IMTClientArray *clients);
  virtual MTAPIRES ClientRequestHistory(UINT64 const client_id,UINT64 const author,INT64 const from,INT64 const to,IMTClientArray *history);
  virtual MTAPIRES ClientUserAdd(UINT64 const client_id,UINT64 const login);
  virtual MTAPIRES ClientUserAddBatch(UINT64 const client_id,UINT64 const *logins,UINT const logins_total,MTAPIRES *results);
  virtual MTAPIRES ClientUserDelete(UINT64 const client_id,UINT64 const login);
  virtual MTAPIRES ClientUserDeleteBatch(UINT64 const client_id,UINT64 const *logins,UINT const logins_total,MTAPIRES *results);
  virtual MTAPIRES ClientUserRequest(UINT64 const client_id,UINT64 *&logins,UINT &logins_total);
  virtual MTAPIRES ClientReserved1();
  virtual MTAPIRES ClientReserved2();
  virtual MTAPIRES ClientReserved3();
  virtual MTAPIRES ClientReserved4();
  virtual IMTDocument *DocumentCreate();
  virtual IMTDocumentArray *DocumentCreateArray();
  virtual MTAPIRES DocumentAdd(IMTDocument *document);
  virtual MTAPIRES DocumentAddBatch(IMTDocumentArray *documents,MTAPIRES *results);
  virtual MTAPIRES DocumentAddBatchArray(IMTDocument **documents,UINT const documents_total,MTAPIRES *results);
  virtual MTAPIRES DocumentUpdate(IMTDocument *document);
  virtual MTAPIRES DocumentUpdateBatch(IMTDocumentArray *documents,MTAPIRES *results);
  virtual MTAPIRES DocumentUpdateBatchArray(IMTDocument **documents,UINT const documents_total,MTAPIRES *results);
  virtual MTAPIRES DocumentDelete(UINT64 const document_id);
  virtual MTAPIRES DocumentDeleteBatch(UINT64 const *document_ids,UINT const document_ids_total,MTAPIRES *results);
  virtual MTAPIRES DocumentRequest(UINT64 const document_id,IMTDocument *document);
  virtual MTAPIRES DocumentRequestByClient(UINT64 const client_id,IMTDocumentArray *documents);
  virtual MTAPIRES DocumentRequestHistory(UINT64 const document_id,UINT64 const author,INT64 const from,INT64 const to,IMTDocumentArray *history);
  virtual MTAPIRES DocumentReserved1();
  virtual MTAPIRES DocumentReserved2();
  virtual MTAPIRES DocumentReserved3();
  virtual MTAPIRES DocumentReserved4();
  virtual IMTComment *CommentCreate();
  virtual IMTCommentArray *CommentCreateArray();
  virtual MTAPIRES CommentAdd(IMTComment *comment);
  virtual MTAPIRES CommentAddBatch(IMTCommentArray *comments,MTAPIRES *results);
  virtual MTAPIRES CommentAddBatchArray(IMTComment **comments,UINT const comments_total,MTAPIRES *results);
  virtual MTAPIRES CommentUpdate(IMTComment *comment);
  virtual MTAPIRES CommentUpdateBatch(IMTCommentArray *comments,MTAPIRES *results);
  virtual MTAPIRES CommentUpdateBatchArray(IMTComment **comments,UINT const comments_total,MTAPIRES *results);
  virtual MTAPIRES CommentDelete(UINT64 const comment_id);
  virtual MTAPIRES CommentDeleteBatch(UINT64 const *comment_ids,UINT const comment_ids_total,MTAPIRES *results);
  virtual MTAPIRES CommentRequest(UINT64 const comment_id,IMTComment *comment);
  virtual MTAPIRES CommentRequestByClient(UINT64 const client_id,UINT const position,UINT const total,IMTCommentArray *comments);
  virtual MTAPIRES CommentRequestByDocument(UINT64 const document_id,UINT const position,UINT const total,IMTCommentArray *comments);
  virtual MTAPIRES CommentReserved1();
  virtual MTAPIRES CommentReserved2();
  virtual MTAPIRES CommentReserved3();
  virtual MTAPIRES CommentReserved4();
  virtual IMTAttachment *AttachmentCreate();
  virtual IMTAttachmentArray *AttachmentCreateArray();
  virtual MTAPIRES AttachmentAdd(IMTAttachment *attachment);
  virtual MTAPIRES AttachmentAddBatch(IMTAttachmentArray *attachments,MTAPIRES *results);
  virtual MTAPIRES AttachmentAddBatchArray(IMTAttachment **attachments,UINT const attachments_total,MTAPIRES *results);
  virtual MTAPIRES AttachmentRequest(UINT64 const *attachment_ids,UINT const attachment_ids_total,IMTAttachmentArray *attachments);
  virtual MTAPIRES AttachmentReserved1();
  virtual MTAPIRES AttachmentReserved2();
  virtual MTAPIRES AttachmentReserved3();
  virtual MTAPIRES AttachmentReserved4();
  virtual MTAPIRES UserRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTUserArray *users);
  virtual MTAPIRES UserBackupRequestArray(UINT64 const server,INT64 const backup,LPCWSTR groups,IMTUserArray *users);
  virtual MTAPIRES UserBackupRequestByLogins(UINT64 const server,INT64 const backup,UINT64 const *logins,UINT const logins_total,IMTUserArray *users);
  virtual MTAPIRES UserArchiveRequestArray(LPCWSTR groups,IMTUserArray *users);
  virtual MTAPIRES UserArchiveRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTUserArray *users);
  virtual MTAPIRES UserUpdateBatch(IMTUserArray *users,MTAPIRES *results);
  virtual MTAPIRES UserUpdateBatchArray(IMTUser **users,UINT const users_total,MTAPIRES *results);
  virtual IMTConAutomation *AutomationCreate();
  virtual IMTConAutoCondition *AutomationConditionCreate();
  virtual IMTConAutoAction *AutomationActionCreate();
  virtual IMTConAutoParam *AutomationParamCreate();
  virtual MTAPIRES AutomationSubscribe(IMTConAutomationSink *sink);
  virtual MTAPIRES AutomationUnsubscribe(IMTConAutomationSink *sink);
  virtual MTAPIRES AutomationUpdate(IMTConAutomation *config);
  virtual MTAPIRES AutomationDelete(LPCWSTR name);
  virtual MTAPIRES AutomationDelete(UINT const pos);
  virtual MTAPIRES AutomationShift(UINT const pos,int const shift);
  virtual UINT AutomationTotal();
  virtual MTAPIRES AutomationNext(UINT const pos,IMTConAutomation *config);
  virtual MTAPIRES AutomationGet(LPCWSTR name,IMTConAutomation *config);
  virtual MTAPIRES AutomationUpdateBatch(IMTConAutomation **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES AutomationDeleteBatch(IMTConAutomation **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES AutomationReserved1();
  virtual MTAPIRES AutomationReserved2();
  virtual MTAPIRES AutomationReserved3();
  virtual MTAPIRES AutomationReserved4();
  virtual IMTConSubscription *SubscriptionCfgCreate();
  virtual IMTConSubscriptionSymbol *SubscriptionCfgSymbolCreate();
  virtual IMTConSubscriptionNews *SubscriptionCfgNewsCreate();
  virtual MTAPIRES SubscriptionCfgSubscribe(IMTConSubscriptionSink *sink);
  virtual MTAPIRES SubscriptionCfgUnsubscribe(IMTConSubscriptionSink *sink);
  virtual MTAPIRES SubscriptionCfgUpdate(IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgDelete(LPCWSTR name);
  virtual MTAPIRES SubscriptionCfgDelete(UINT const pos);
  virtual MTAPIRES SubscriptionCfgDeleteByID(UINT64 const id);
  virtual MTAPIRES SubscriptionCfgShift(UINT const pos,int const shift);
  virtual UINT SubscriptionCfgTotal();
  virtual MTAPIRES SubscriptionCfgNext(UINT const pos,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgGet(LPCWSTR name,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgGetByID(UINT64 const id,IMTConSubscription *config);
  virtual MTAPIRES SubscriptionCfgUpdateBatch(IMTConSubscription **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionCfgDeleteBatch(IMTConSubscription **configs,UINT const configs_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionCfgReserved1();
  virtual MTAPIRES SubscriptionCfgReserved2();
  virtual MTAPIRES SubscriptionCfgReserved3();
  virtual MTAPIRES SubscriptionCfgReserved4();
  virtual IMTSubscription *SubscriptionCreate();
  virtual IMTSubscriptionArray *SubscriptionCreateArray();
  virtual MTAPIRES SubscriptionJoin(UINT64 const login,UINT64 const subscription,IMTSubscription *record,IMTSubscriptionHistory *history);
  virtual MTAPIRES SubscriptionJoinBatch(UINT64 const *logins,UINT64 const *subscriptions,UINT const total,MTAPIRES *results,IMTSubscriptionArray *records,IMTSubscriptionHistoryArray *history);
  virtual MTAPIRES SubscriptionCancel(UINT64 const login,UINT64 const subscription,IMTSubscription *record,IMTSubscriptionHistory *history);
  virtual MTAPIRES SubscriptionCancelBatch(UINT64 const *logins,UINT64 const *subscriptions,UINT const total,MTAPIRES *results,IMTSubscriptionArray *records,IMTSubscriptionHistoryArray *history);
  virtual MTAPIRES SubscriptionUpdate(IMTSubscription *subscription);
  virtual MTAPIRES SubscriptionUpdateBatch(IMTSubscriptionArray *records,MTAPIRES *results);
  virtual MTAPIRES SubscriptionUpdateBatchArray(IMTSubscription **records,UINT const records_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionDelete(UINT64 const id);
  virtual MTAPIRES SubscriptionDeleteBatch(UINT64 const *ids,UINT const ids_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionRequest(UINT64 const login,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionRequestByID(UINT64 const id,IMTSubscription *record);
  virtual MTAPIRES SubscriptionRequestByGroup(LPCWSTR group,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionRequestByLogins(UINT64 const *logins,UINT const logins_total,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionRequestByIDs(UINT64 const *ids,UINT const ids_total,IMTSubscriptionArray *records);
  virtual MTAPIRES SubscriptionReserved1();
  virtual MTAPIRES SubscriptionReserved2();
  virtual MTAPIRES SubscriptionReserved3();
  virtual MTAPIRES SubscriptionReserved4();
  virtual IMTSubscriptionHistory *SubscriptionHistoryCreate();
  virtual IMTSubscriptionHistoryArray *SubscriptionHistoryCreateArray();
  virtual MTAPIRES SubscriptionHistoryUpdate(IMTSubscriptionHistory *subscription);
  virtual MTAPIRES SubscriptionHistoryUpdateBatch(IMTSubscriptionHistoryArray *records,MTAPIRES *results);
  virtual MTAPIRES SubscriptionHistoryUpdateBatchArray(IMTSubscriptionHistory **records,UINT const records_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionHistoryDelete(UINT64 const id);
  virtual MTAPIRES SubscriptionHistoryDeleteBatch(UINT64 const *ids,UINT const ids_total,MTAPIRES *results);
  virtual MTAPIRES SubscriptionHistoryRequest(UINT64 const login,INT64 const from,INT64 const to,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryRequestByID(UINT64 const id,IMTSubscriptionHistory *record);
  virtual MTAPIRES SubscriptionHistoryRequestByGroup(LPCWSTR group,INT64 const from,INT64 const to,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryRequestByLogins(UINT64 const *logins,UINT const logins_total,INT64 const from,INT64 const to,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryRequestByIDs(UINT64 const *ids,UINT const ids_total,IMTSubscriptionHistoryArray *records);
  virtual MTAPIRES SubscriptionHistoryReserved1();
  virtual MTAPIRES SubscriptionHistoryReserved2();
  virtual MTAPIRES SubscriptionHistoryReserved3();
  virtual MTAPIRES SubscriptionHistoryReserved4();
  virtual IMTConVPS *VPSCreate();
  virtual IMTConVPSGroup *VPSCreateGroup();
  virtual MTAPIRES VPSSubscribe(IMTConVPSSink *sink);
  virtual MTAPIRES VPSUnsubscribe(IMTConVPSSink *sink);
  virtual MTAPIRES VPSGet(IMTConVPS *config);
  virtual MTAPIRES VPSSet(IMTConVPS *config);
  virtual IMTConVPSRule *VPSCreateRule();
  virtual IMTConVPSCondition *VPSCreateCondition();
  virtual MTAPIRES VPSReserved3();
  virtual MTAPIRES VPSReserved4();
  virtual IMTConKYC *KYCCreate();
  virtual IMTConKYCCountry *KYCCountryCreate();
  virtual IMTConKYCGroup *KYCGroupCreate();
  virtual MTAPIRES KYCSubscribe(IMTConKYCSink *sink);
  virtual MTAPIRES KYCUnsubscribe(IMTConKYCSink *sink);
  virtual MTAPIRES KYCUpdate(IMTConKYC *cfg);
  virtual MTAPIRES KYCDelete(LPCWSTR name);
  virtual MTAPIRES KYCDelete(UINT const pos);
  virtual MTAPIRES KYCShift(UINT const pos,int const shift);
  virtual UINT KYCTotal();
  virtual MTAPIRES KYCNext(UINT const pos,IMTConKYC *cfg);
  virtual MTAPIRES KYCGet(LPCWSTR name,IMTConKYC *cfg);
  virtual MTAPIRES KYCUpdateBatch(IMTConKYC **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES KYCDeleteBatch(IMTConKYC **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES KYCStart(UINT64 const *client_ids,UINT const clients_ids_total,MTAPIRES *results);
  virtual MTAPIRES KYCReserved1();
  virtual MTAPIRES KYCReserved2();
  virtual MTAPIRES KYCReserved3();
  virtual MTAPIRES KYCReserved4();
  virtual MTAPIRES DealPerform(IMTDeal *deal);
  virtual MTAPIRES DealPerformBatch(IMTDealArray *deals,MTAPIRES *results);
  virtual MTAPIRES DealPerformBatchArray(IMTDeal **deals,UINT const deals_total,MTAPIRES *results);
  virtual MTAPIRES DealRequestByLoginsSymbol(UINT64 const *logins,UINT const logins_total,LPCWSTR symbol,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,INT64 const from,INT64 const to,IMTDealArray *deals);
  virtual MTAPIRES DealReserved3();
  virtual MTAPIRES DealReserved4();
  virtual IMTConBackupFolder *NetServerBackupFolderCreate();
  virtual MTAPIRES NetServerReserved1();
  virtual MTAPIRES NetServerReserved2();
  virtual MTAPIRES NetServerReserved3();
  virtual MTAPIRES NetServerReserved4();
  virtual MTAPIRES UserDeleteBatch(UINT64 const *logins,UINT const logins_total,MTAPIRES *results);
  virtual MTAPIRES UserArchiveBatch(UINT64 const *logins,UINT const logins_total,MTAPIRES *results);
  virtual MTAPIRES UserRestoreBatch(IMTUserArray *users,MTAPIRES *results);
  virtual MTAPIRES UserRestoreBatchArray(IMTUser **users,UINT const users_total,MTAPIRES *results);
  virtual MTAPIRES UserBalanceCheckBatch(UINT64 const *logins,UINT const logins_total,UINT const fixflag,MTAPIRES *results,double *balance_user,double *balance_history,double *credit_user,double *credit_history);
  virtual MTAPIRES UserReserved2();
  virtual MTAPIRES UserReserved3();
  virtual MTAPIRES UserReserved4();
  virtual MTAPIRES SymbolGroupDelete(LPCWSTR name);
  virtual MTAPIRES SymbolGroupShift(UINT const pos,int const shift);
  virtual UINT SymbolGroupTotal();
  virtual MTAPIRES SymbolGroupNext(UINT const pos,MTAPISTR &name);
  virtual MTAPIRES SymbolGroupExist(LPCWSTR name);
  virtual MTAPIRES SymbolGroupAdd(LPCWSTR name);
  virtual MTAPIRES SymbolGroupReserved2();
  virtual MTAPIRES SymbolGroupReserved3();
  virtual MTAPIRES SymbolGroupReserved4();
  virtual MTAPIRES OrderRequestByGroupSymbol(LPCWSTR group,LPCWSTR symbol,IMTOrderArray *orders);
  virtual MTAPIRES OrderCancel(UINT64 const ticket);
  virtual MTAPIRES OrderCancelBatch(UINT64 const *tickets,UINT const tickets_total,MTAPIRES *results);
  virtual MTAPIRES OrderReserved3();
  virtual MTAPIRES OrderReserved4();
  virtual IMTConLeverage *LeverageCreate();
  virtual IMTConLeverageRule *LeverageRuleCreate();
  virtual IMTConLeverageTier *LeverageTierCreate();
  virtual MTAPIRES LeverageSubscribe(IMTConLeverageSink *sink);
  virtual MTAPIRES LeverageUnsubscribe(IMTConLeverageSink *sink);
  virtual MTAPIRES LeverageUpdate(IMTConLeverage *cfg);
  virtual MTAPIRES LeverageDelete(LPCWSTR name);
  virtual MTAPIRES LeverageDelete(UINT const pos);
  virtual MTAPIRES LeverageShift(UINT const pos,int const shift);
  virtual UINT LeverageTotal();
  virtual MTAPIRES LeverageNext(UINT const pos,IMTConLeverage *cfg);
  virtual MTAPIRES LeverageGet(LPCWSTR name,IMTConLeverage *cfg);
  virtual MTAPIRES LeverageUpdateBatch(IMTConLeverage **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES LeverageDeleteBatch(IMTConLeverage **configs,UINT const config_total,MTAPIRES *results);
  virtual MTAPIRES LeverageReserved1();
  virtual MTAPIRES LeverageReserved2();
  virtual MTAPIRES LeverageReserved3();
  virtual MTAPIRES LeverageReserved4();
  virtual IMTByteStream *CustomCreateStream();
  virtual MTAPIRES CustomCommand(LPCVOID indata,UINT const indata_len,LPVOID &outdata,UINT &outdata_len);
  virtual MTAPIRES CustomCommand(IMTByteStream *indata,IMTByteStream *outdata);
  virtual MTAPIRES CustomReserved1();
  virtual MTAPIRES CustomReserved2();
  virtual MTAPIRES CustomReserved3();
  virtual MTAPIRES CustomReserved4();
  virtual IMTGeo *GeoCreate();
  virtual MTAPIRES GeoResolve(LPCWSTR address,UINT const flags,IMTGeo *record);
  virtual MTAPIRES GeoResolveBatch(LPCWSTR *addresses,UINT const addresses_total,UINT const flags,IMTGeo **records,MTAPIRES *results);
  virtual MTAPIRES GeoResolveReserved1();
  virtual MTAPIRES GeoResolveReserved2();
  virtual MTAPIRES GeoResolveReserved3();
  virtual MTAPIRES GeoResolveReserved4();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTUser : public IMTUser
{
 public:
  SwigDirector_IMTUser(int swig_p);
  virtual void Release();
  virtual MTAPIRES Assign(IMTUser const *user);
  virtual MTAPIRES Clear();
  virtual UINT64 Login() const;
  virtual MTAPIRES Login(UINT64 const login);
  virtual LPCWSTR Group() const;
  virtual MTAPIRES Group(LPCWSTR group);
  virtual UINT64 CertSerialNumber() const;
  virtual UINT64 Rights() const;
  virtual MTAPIRES Rights(UINT64 const rights);
  virtual INT64 Registration() const;
  virtual INT64 LastAccess() const;
  virtual LPCWSTR LastIP(MTAPISTR &ip) const;
  virtual LPCWSTR Name() const;
  virtual MTAPIRES Name(LPCWSTR name);
  virtual LPCWSTR Company() const;
  virtual MTAPIRES Company(LPCWSTR id);
  virtual LPCWSTR Account() const;
  virtual MTAPIRES Account(LPCWSTR account);
  virtual LPCWSTR Country() const;
  virtual MTAPIRES Country(LPCWSTR account);
  virtual UINT Language() const;
  virtual MTAPIRES Language(UINT const language);
  virtual LPCWSTR City() const;
  virtual MTAPIRES City(LPCWSTR city);
  virtual LPCWSTR State() const;
  virtual MTAPIRES State(LPCWSTR state);
  virtual LPCWSTR ZIPCode() const;
  virtual MTAPIRES ZIPCode(LPCWSTR code);
  virtual LPCWSTR Address() const;
  virtual MTAPIRES Address(LPCWSTR code);
  virtual LPCWSTR Phone() const;
  virtual MTAPIRES Phone(LPCWSTR phone);
  virtual LPCWSTR EMail() const;
  virtual MTAPIRES EMail(LPCWSTR email);
  virtual LPCWSTR ID() const;
  virtual MTAPIRES ID(LPCWSTR email);
  virtual LPCWSTR Status() const;
  virtual MTAPIRES Status(LPCWSTR id);
  virtual LPCWSTR Comment() const;
  virtual MTAPIRES Comment(LPCWSTR comment);
  virtual COLORREF Color() const;
  virtual MTAPIRES Color(COLORREF const color);
  virtual LPCWSTR PhonePassword() const;
  virtual MTAPIRES PhonePassword(LPCWSTR password);
  virtual UINT Leverage() const;
  virtual MTAPIRES Leverage(UINT const leverage);
  virtual UINT64 Agent() const;
  virtual MTAPIRES Agent(UINT64 const agent);
  virtual double Balance() const;
  virtual double Credit() const;
  virtual double InterestRate() const;
  virtual double CommissionDaily() const;
  virtual double CommissionMonthly() const;
  virtual double CommissionAgentDaily() const;
  virtual double CommissionAgentMonthly() const;
  virtual double BalancePrevDay() const;
  virtual double BalancePrevMonth() const;
  virtual double EquityPrevDay() const;
  virtual double EquityPrevMonth() const;
  virtual MTAPIRES ApiDataSet(USHORT const app_id,UCHAR const id,INT64 const value);
  virtual MTAPIRES ApiDataSet(USHORT const app_id,UCHAR const id,UINT64 const value);
  virtual MTAPIRES ApiDataSet(USHORT const app_id,UCHAR const id,double const value);
  virtual MTAPIRES ApiDataGet(USHORT const app_id,UCHAR const id,INT64 &value) const;
  virtual MTAPIRES ApiDataGet(USHORT const app_id,UCHAR const id,UINT64 &value) const;
  virtual MTAPIRES ApiDataGet(USHORT const app_id,UCHAR const id,double &value) const;
  virtual MTAPIRES ApiDataClear(USHORT const app_id);
  virtual MTAPIRES ApiDataClearAll();
  virtual MTAPIRES ExternalAccountAdd(UINT64 const gateway_id,LPCWSTR account);
  virtual MTAPIRES ExternalAccountUpdate(UINT const pos,UINT64 const gateway_id,LPCWSTR account);
  virtual MTAPIRES ExternalAccountDelete(UINT const pos);
  virtual MTAPIRES ExternalAccountClear();
  virtual UINT ExternalAccountTotal() const;
  virtual MTAPIRES ExternalAccountNext(UINT const pos,UINT64 &gateway_id,MTAPISTR &account) const;
  virtual MTAPIRES ExternalAccountGet(UINT64 const gateway_id,MTAPISTR &account) const;
  virtual INT64 LastPassChange() const;
  virtual LPCWSTR MQID(MTAPISTR &mqid) const;
  virtual MTAPIRES ApiDataUpdate(UINT const pos,USHORT const app_id,UCHAR const id,INT64 const value);
  virtual MTAPIRES ApiDataUpdate(UINT const pos,USHORT const app_id,UCHAR const id,UINT64 const value);
  virtual MTAPIRES ApiDataUpdate(UINT const pos,USHORT const app_id,UCHAR const id,double const value);
  virtual MTAPIRES ApiDataNext(UINT const pos,USHORT &app_id,UCHAR &id,INT64 &value) const;
  virtual MTAPIRES ApiDataNext(UINT const pos,USHORT &app_id,UCHAR &id,UINT64 &value) const;
  virtual MTAPIRES ApiDataNext(UINT const pos,USHORT &app_id,UCHAR &id,double &value) const;
  virtual MTAPIRES PasswordHash(UINT const type,MTAPISTR &password_hash) const;
  virtual LPCWSTR LeadCampaign() const;
  virtual MTAPIRES LeadCampaign(LPCWSTR lead_campaign);
  virtual LPCWSTR LeadSource() const;
  virtual MTAPIRES LeadSource(LPCWSTR lead_source);
  virtual UINT64 ClientID() const;
  virtual MTAPIRES ClientID(UINT64 const id);
  virtual LPCWSTR FirstName() const;
  virtual MTAPIRES FirstName(LPCWSTR first_name);
  virtual LPCWSTR LastName() const;
  virtual MTAPIRES LastName(LPCWSTR last_name);
  virtual LPCWSTR MiddleName() const;
  virtual MTAPIRES MiddleName(LPCWSTR middle_name);
  virtual MTAPIRES RegistrationSet(INT64 const datetime);
  virtual LPCWSTR OTPSecret() const;
  virtual MTAPIRES OTPSecret(LPCWSTR otp_secret);
  virtual UINT LimitOrders() const;
  virtual MTAPIRES LimitOrders(UINT const id);
  virtual double LimitPositionsValue() const;
  virtual MTAPIRES LimitPositionsValue(double const value);
  virtual UINT64 VisitorID() const;
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTUserArray : public IMTUserArray
{
 public:
  SwigDirector_IMTUserArray(int swig_p);
  virtual void Release();
  virtual MTAPIRES Assign(IMTUserArray const *array);
  virtual MTAPIRES Clear();
  virtual MTAPIRES Add(IMTUser *user);
  virtual MTAPIRES AddCopy(IMTUser const *user);
  virtual MTAPIRES Add(IMTUserArray *array);
  virtual MTAPIRES AddCopy(IMTUserArray const *array);
  virtual MTAPIRES Delete(UINT const pos);
  virtual IMTUser *Detach(UINT const pos);
  virtual MTAPIRES Update(UINT const pos,IMTUser *account);
  virtual MTAPIRES UpdateCopy(UINT const pos,IMTUser const *account);
  virtual MTAPIRES Shift(UINT const pos,int const shift);
  virtual UINT Total() const;
  virtual IMTUser *Next(UINT const index) const;
  virtual MTAPIRES Sort(MTSortFunctionPtr sort_function);
  virtual int Search(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchGreatOrEq(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchGreater(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchLessOrEq(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchLess(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchLeft(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchRight(void const *key,MTSortFunctionPtr sort_function) const;
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTUserSink : public IMTUserSink
{
 public:
  SwigDirector_IMTUserSink(int swig_p);
  void _swig_upcall_OnUserAdd(IMTUser const *arg0) {
    IMTUserSink::OnUserAdd(arg0);
  }
  virtual void OnUserAdd(IMTUser const *arg0);
  void _swig_upcall_OnUserUpdate(IMTUser const *arg0) {
    IMTUserSink::OnUserUpdate(arg0);
  }
  virtual void OnUserUpdate(IMTUser const *arg0);
  void _swig_upcall_OnUserDelete(IMTUser const *arg0) {
    IMTUserSink::OnUserDelete(arg0);
  }
  virtual void OnUserDelete(IMTUser const *arg0);
  void _swig_upcall_OnUserClean(UINT64 const arg0) {
    IMTUserSink::OnUserClean(arg0);
  }
  virtual void OnUserClean(UINT64 const arg0);
  void _swig_upcall_OnUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2) {
    IMTUserSink::OnUserLogin(arg0,arg1,arg2);
  }
  virtual void OnUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2);
  void _swig_upcall_OnUserSync() {
    IMTUserSink::OnUserSync();
  }
  virtual void OnUserSync();
  MTAPIRES _swig_upcall_HookUserAdd(IMTUser *arg0) {
    return IMTUserSink::HookUserAdd(arg0);
  }
  virtual MTAPIRES HookUserAdd(IMTUser *arg0);
  MTAPIRES _swig_upcall_HookUserUpdate(IMTUser const *arg0,IMTUser *arg1) {
    return IMTUserSink::HookUserUpdate(arg0,arg1);
  }
  virtual MTAPIRES HookUserUpdate(IMTUser const *arg0,IMTUser *arg1);
  MTAPIRES _swig_upcall_HookUserDelete(IMTUser const *arg0) {
    return IMTUserSink::HookUserDelete(arg0);
  }
  virtual MTAPIRES HookUserDelete(IMTUser const *arg0);
  MTAPIRES _swig_upcall_HookUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2) {
    return IMTUserSink::HookUserLogin(arg0,arg1,arg2);
  }
  virtual MTAPIRES HookUserLogin(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2);
  void _swig_upcall_OnUserLogout(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2) {
    IMTUserSink::OnUserLogout(arg0,arg1,arg2);
  }
  virtual void OnUserLogout(LPCWSTR arg0,IMTUser const *arg1,UINT const arg2);
  void _swig_upcall_OnUserArchive(IMTUser const *arg0) {
    IMTUserSink::OnUserArchive(arg0);
  }
  virtual void OnUserArchive(IMTUser const *arg0);
  void _swig_upcall_OnUserRestore(IMTUser const *arg0) {
    IMTUserSink::OnUserRestore(arg0);
  }
  virtual void OnUserRestore(IMTUser const *arg0);
  MTAPIRES _swig_upcall_HookUserArchive(IMTUser const *arg0) {
    return IMTUserSink::HookUserArchive(arg0);
  }
  virtual MTAPIRES HookUserArchive(IMTUser const *arg0);
  MTAPIRES _swig_upcall_HookUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1) {
    return IMTUserSink::HookUserLoginExt(arg0,arg1);
  }
  virtual MTAPIRES HookUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1);
  void _swig_upcall_OnUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1) {
    IMTUserSink::OnUserLoginExt(arg0,arg1);
  }
  virtual void OnUserLoginExt(IMTUser const *arg0,IMTOnline const *arg1);
  void _swig_upcall_OnUserLogoutExt(IMTUser const *arg0,IMTOnline const *arg1) {
    IMTUserSink::OnUserLogoutExt(arg0,arg1);
  }
  virtual void OnUserLogoutExt(IMTUser const *arg0,IMTOnline const *arg1);
  void _swig_upcall_OnUserAddExt(IMTUser const *arg0,LPCWSTR arg1,LPCWSTR arg2) {
    IMTUserSink::OnUserAddExt(arg0,arg1,arg2);
  }
  virtual void OnUserAddExt(IMTUser const *arg0,LPCWSTR arg1,LPCWSTR arg2);
  void _swig_upcall_OnUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2) {
    IMTUserSink::OnUserChangePassword(arg0,arg1,arg2);
  }
  virtual void OnUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2);
  MTAPIRES _swig_upcall_HookUserAddExt(IMTUser *arg0,LPCWSTR arg1,LPCWSTR arg2) {
    return IMTUserSink::HookUserAddExt(arg0,arg1,arg2);
  }
  virtual MTAPIRES HookUserAddExt(IMTUser *arg0,LPCWSTR arg1,LPCWSTR arg2);
  MTAPIRES _swig_upcall_HookUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2) {
    return IMTUserSink::HookUserChangePassword(arg0,arg1,arg2);
  }
  virtual MTAPIRES HookUserChangePassword(IMTUser const *arg0,UINT const arg1,LPCWSTR arg2);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_CMTStr : public CMTStr
{
 public:
  SwigDirector_CMTStr(int swig_p,wchar_t *buf,UINT const size);
  SwigDirector_CMTStr(int swig_p);
  SwigDirector_CMTStr(int swig_p,CMTStr const &from);
  SwigDirector_CMTStr(int swig_p,LPWSTR buf,UINT const size,LPCWSTR from);
  virtual ~SwigDirector_CMTStr();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_CMTArrayBase : public CMTArrayBase
{
 public:
  SwigDirector_CMTArrayBase(int swig_p,UINT const width,UINT const step);
  SwigDirector_CMTArrayBase(int swig_p);
  virtual ~SwigDirector_CMTArrayBase();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_CMTFile : public CMTFile
{
 public:
  SwigDirector_CMTFile(int swig_p);
  virtual ~SwigDirector_CMTFile();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTConCommTier : public IMTConCommTier
{
 public:
  SwigDirector_IMTConCommTier(int swig_p);
  virtual void Release();
  virtual MTAPIRES Assign(IMTConCommTier const *group);
  virtual MTAPIRES Clear();
  virtual UINT Mode() const;
  virtual MTAPIRES Mode(UINT const mode);
  virtual UINT Type() const;
  virtual MTAPIRES Type(UINT const type);
  virtual double Value() const;
  virtual MTAPIRES Value(double const value);
  virtual double Minimal() const;
  virtual MTAPIRES Minimal(double const value);
  virtual double RangeFrom() const;
  virtual MTAPIRES RangeFrom(double const value);
  virtual double RangeTo() const;
  virtual MTAPIRES RangeTo(double const value);
  virtual LPCWSTR Currency() const;
  virtual MTAPIRES Currency(LPCWSTR currency);
  virtual double Maximal() const;
  virtual MTAPIRES Maximal(double const value);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTConCommission : public IMTConCommission
{
 public:
  SwigDirector_IMTConCommission(int swig_p);
  virtual void Release();
  virtual MTAPIRES Assign(IMTConCommission const *group);
  virtual MTAPIRES Clear();
  virtual LPCWSTR Name() const;
  virtual MTAPIRES Name(LPCWSTR name);
  virtual LPCWSTR Description() const;
  virtual MTAPIRES Description(LPCWSTR descr);
  virtual LPCWSTR Path() const;
  virtual MTAPIRES Path(LPCWSTR path);
  virtual UINT Mode() const;
  virtual MTAPIRES Mode(UINT const mode);
  virtual UINT RangeMode() const;
  virtual MTAPIRES RangeMode(UINT const mode);
  virtual UINT ChargeMode() const;
  virtual MTAPIRES ChargeMode(UINT const mode);
  virtual MTAPIRES TierAdd(IMTConCommTier *tier);
  virtual MTAPIRES TierUpdate(UINT const pos,IMTConCommTier const *tier);
  virtual MTAPIRES TierDelete(UINT const pos);
  virtual MTAPIRES TierClear();
  virtual MTAPIRES TierShift(UINT const pos,int const shift);
  virtual UINT TierTotal() const;
  virtual MTAPIRES TierNext(UINT const pos,IMTConCommTier *tier) const;
  virtual LPCWSTR TurnoverCurrency() const;
  virtual MTAPIRES TurnoverCurrency(LPCWSTR currency);
  virtual UINT EntryMode() const;
  virtual MTAPIRES EntryMode(UINT const mode);
  virtual UINT ActionMode() const;
  virtual MTAPIRES ActionMode(UINT const mode);
  virtual UINT ProfitMode() const;
  virtual MTAPIRES ProfitMode(UINT const mode);
  virtual UINT ReasonFlags() const;
  virtual MTAPIRES ReasonFlags(UINT const flags);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTConGroupSymbol : public IMTConGroupSymbol
{
 public:
  SwigDirector_IMTConGroupSymbol(int swig_p);
  virtual void Release();
  virtual MTAPIRES Assign(IMTConGroupSymbol const *group);
  virtual MTAPIRES Clear();
  virtual MTAPIRES Default();
  virtual LPCWSTR Path() const;
  virtual MTAPIRES Path(LPCWSTR path);
  virtual UINT TradeMode() const;
  virtual MTAPIRES TradeMode(UINT const mode);
  virtual UINT TradeModeDefault() const;
  virtual UINT ExecMode() const;
  virtual MTAPIRES ExecMode(UINT const mode);
  virtual UINT ExecModeDefault() const;
  virtual UINT FillFlags() const;
  virtual MTAPIRES FillFlags(UINT const flags);
  virtual UINT FillFlagsDefault() const;
  virtual UINT ExpirFlags() const;
  virtual MTAPIRES ExpirFlags(UINT const flags);
  virtual UINT ExpirFlagsDefault() const;
  virtual INT SpreadDiff() const;
  virtual MTAPIRES SpreadDiff(INT const spread);
  virtual INT SpreadDiffDefault() const;
  virtual INT SpreadDiffBalance() const;
  virtual MTAPIRES SpreadDiffBalance(INT const spread);
  virtual INT SpreadDiffBalanceDefault() const;
  virtual INT StopsLevel() const;
  virtual MTAPIRES StopsLevel(INT const level);
  virtual INT StopsLevelDefault() const;
  virtual INT FreezeLevel() const;
  virtual MTAPIRES FreezeLevel(INT const level);
  virtual INT FreezeLevelDefault() const;
  virtual UINT64 VolumeMin() const;
  virtual MTAPIRES VolumeMin(UINT64 const volume);
  virtual UINT64 VolumeMinDefault() const;
  virtual UINT64 VolumeMax() const;
  virtual MTAPIRES VolumeMax(UINT64 const volume);
  virtual UINT64 VolumeMaxDefault() const;
  virtual UINT64 VolumeStep() const;
  virtual MTAPIRES VolumeStep(UINT64 const volume);
  virtual UINT64 VolumeStepDefault() const;
  virtual UINT64 VolumeLimit() const;
  virtual MTAPIRES VolumeLimit(UINT64 const volume);
  virtual UINT64 VolumeLimitDefault() const;
  virtual UINT MarginFlags() const;
  virtual MTAPIRES MarginFlags(UINT const flags);
  virtual UINT MarginFlagsDefault() const;
  virtual double MarginInitial() const;
  virtual MTAPIRES MarginInitial(double const margin);
  virtual double MarginInitialDefault() const;
  virtual double MarginMaintenance() const;
  virtual MTAPIRES MarginMaintenance(double const margin);
  virtual double MarginMaintenanceDefault() const;
  virtual double MarginLong() const;
  virtual MTAPIRES MarginLong(double const margin);
  virtual double MarginLongDefault() const;
  virtual double MarginShort() const;
  virtual MTAPIRES MarginShort(double const margin);
  virtual double MarginShortDefault() const;
  virtual double MarginLimit() const;
  virtual MTAPIRES MarginLimit(double const margin);
  virtual double MarginLimitDefault() const;
  virtual double MarginStop() const;
  virtual MTAPIRES MarginStop(double const margin);
  virtual double MarginStopDefault() const;
  virtual double MarginStopLimit() const;
  virtual MTAPIRES MarginStopLimit(double const margin);
  virtual double MarginStopLimitDefault() const;
  virtual UINT SwapMode() const;
  virtual MTAPIRES SwapMode(UINT const mode);
  virtual UINT SwapModeDefault() const;
  virtual double SwapLong() const;
  virtual MTAPIRES SwapLong(double const swap);
  virtual double SwapLongDefault() const;
  virtual double SwapShort() const;
  virtual MTAPIRES SwapShort(double const swap);
  virtual double SwapShortDefault() const;
  virtual int Swap3Day() const;
  virtual MTAPIRES Swap3Day(int const day);
  virtual int Swap3DayDefault() const;
  virtual UINT RETimeout() const;
  virtual MTAPIRES RETimeout(UINT const timeout);
  virtual UINT RETimeoutDefault() const;
  virtual UINT IECheckMode() const;
  virtual MTAPIRES IECheckMode(UINT const mode);
  virtual UINT IECheckModeDefault() const;
  virtual UINT IETimeout() const;
  virtual MTAPIRES IETimeout(UINT const timeout);
  virtual UINT IETimeoutDefault() const;
  virtual UINT IESlipProfit() const;
  virtual MTAPIRES IESlipProfit(UINT const slippage);
  virtual UINT IESlipProfitDefault() const;
  virtual UINT IESlipLosing() const;
  virtual MTAPIRES IESlipLosing(UINT const slippage);
  virtual UINT IESlipLosingDefault() const;
  virtual UINT64 IEVolumeMax() const;
  virtual MTAPIRES IEVolumeMax(UINT64 const volume);
  virtual UINT64 IEVolumeMaxDefault() const;
  virtual UINT OrderFlags() const;
  virtual MTAPIRES OrderFlags(UINT const flags);
  virtual UINT OrderFlagsDefault() const;
  virtual double MarginRateInitial(UINT const type) const;
  virtual MTAPIRES MarginRateInitial(UINT const type,double const margin_rate);
  virtual double MarginRateInitialDefault() const;
  virtual double MarginRateMaintenance(UINT const type) const;
  virtual MTAPIRES MarginRateMaintenance(UINT const type,double const margin_rate);
  virtual double MarginRateMaintenanceDefault() const;
  virtual double MarginRateLiquidity() const;
  virtual MTAPIRES MarginRateLiquidity(double const rate);
  virtual double MarginRateLiquidityDefault() const;
  virtual UINT REFlags() const;
  virtual MTAPIRES REFlags(UINT const flags);
  virtual UINT REFlagsDefault() const;
  virtual double MarginHedged() const;
  virtual MTAPIRES MarginHedged(double const margin);
  virtual double MarginHedgedDefault() const;
  virtual UINT PermissionsFlags() const;
  virtual MTAPIRES PermissionsFlags(UINT const flags);
  virtual double MarginRateCurrency() const;
  virtual MTAPIRES MarginRateCurrency(double const margin_rate);
  virtual double MarginRateCurrencyDefault() const;
  virtual UINT BookDepthLimit() const;
  virtual MTAPIRES BookDepthLimit(UINT const depth);
  virtual UINT IEFlags() const;
  virtual MTAPIRES IEFlags(UINT const flags);
  virtual UINT IEFlagsDefault() const;
  virtual UINT64 VolumeMinExt() const;
  virtual MTAPIRES VolumeMinExt(UINT64 const volume);
  virtual UINT64 VolumeMinExtDefault() const;
  virtual UINT64 VolumeMaxExt() const;
  virtual MTAPIRES VolumeMaxExt(UINT64 const volume);
  virtual UINT64 VolumeMaxExtDefault() const;
  virtual UINT64 VolumeStepExt() const;
  virtual MTAPIRES VolumeStepExt(UINT64 const volume);
  virtual UINT64 VolumeStepExtDefault() const;
  virtual UINT64 VolumeLimitExt() const;
  virtual MTAPIRES VolumeLimitExt(UINT64 const volume);
  virtual UINT64 VolumeLimitExtDefault() const;
  virtual UINT64 IEVolumeMaxExt() const;
  virtual MTAPIRES IEVolumeMaxExt(UINT64 const volume);
  virtual UINT64 IEVolumeMaxExtDefault() const;
  virtual UINT SwapYearDays() const;
  virtual MTAPIRES SwapYearDays(UINT const days);
  virtual UINT SwapYearDaysDefault() const;
  virtual UINT SwapFlags() const;
  virtual MTAPIRES SwapFlags(UINT const flags);
  virtual UINT SwapFlagsDefault() const;
  virtual double SwapRateSunday() const;
  virtual MTAPIRES SwapRateSunday(double const rate);
  virtual double SwapRateSundayDefault() const;
  virtual double SwapRateMonday() const;
  virtual MTAPIRES SwapRateMonday(double const rate);
  virtual double SwapRateMondayDefault() const;
  virtual double SwapRateTuesday() const;
  virtual MTAPIRES SwapRateTuesday(double const rate);
  virtual double SwapRateTuesdayDefault() const;
  virtual double SwapRateWednesday() const;
  virtual MTAPIRES SwapRateWednesday(double const rate);
  virtual double SwapRateWednesdayDefault() const;
  virtual double SwapRateThursday() const;
  virtual MTAPIRES SwapRateThursday(double const rate);
  virtual double SwapRateThursdayDefault() const;
  virtual double SwapRateFriday() const;
  virtual MTAPIRES SwapRateFriday(double const rate);
  virtual double SwapRateFridayDefault() const;
  virtual double SwapRateSaturday() const;
  virtual MTAPIRES SwapRateSaturday(double const rate);
  virtual double SwapRateSaturdayDefault() const;
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTConGroup : public IMTConGroup
{
 public:
  SwigDirector_IMTConGroup(int swig_p);
  virtual void Release();
  virtual MTAPIRES Assign(IMTConGroup const *group);
  virtual MTAPIRES Clear();
  virtual LPCWSTR Group() const;
  virtual MTAPIRES Group(LPCWSTR group);
  virtual UINT64 Server() const;
  virtual MTAPIRES Server(UINT64 const server);
  virtual UINT64 PermissionsFlags() const;
  virtual MTAPIRES PermissionsFlags(UINT64 const flags);
  virtual UINT AuthMode() const;
  virtual MTAPIRES AuthMode(UINT const mode);
  virtual UINT AuthPasswordMin() const;
  virtual MTAPIRES AuthPasswordMin(UINT const mode);
  virtual LPCWSTR Company() const;
  virtual MTAPIRES Company(LPCWSTR company);
  virtual LPCWSTR CompanyPage() const;
  virtual MTAPIRES CompanyPage(LPCWSTR page);
  virtual LPCWSTR CompanyEmail() const;
  virtual MTAPIRES CompanyEmail(LPCWSTR email);
  virtual LPCWSTR CompanySupportPage() const;
  virtual MTAPIRES CompanySupportPage(LPCWSTR page);
  virtual LPCWSTR CompanySupportEmail() const;
  virtual MTAPIRES CompanySupportEmail(LPCWSTR email);
  virtual LPCWSTR CompanyCatalog() const;
  virtual MTAPIRES CompanyCatalog(LPCWSTR catalog);
  virtual LPCWSTR Currency() const;
  virtual MTAPIRES Currency(LPCWSTR currency);
  virtual UINT CurrencyDigits() const;
  virtual UINT ReportsMode() const;
  virtual MTAPIRES ReportsMode(UINT const mode);
  virtual UINT64 ReportsFlags() const;
  virtual MTAPIRES ReportsFlags(UINT64 const flags);
  virtual LPCWSTR ReportsSMTP() const;
  virtual MTAPIRES ReportsSMTP(LPCWSTR server);
  virtual LPCWSTR ReportsSMTPLogin() const;
  virtual MTAPIRES ReportsSMTPLogin(LPCWSTR login);
  virtual LPCWSTR ReportsSMTPPass() const;
  virtual MTAPIRES ReportsSMTPPass(LPCWSTR password);
  virtual UINT NewsMode() const;
  virtual MTAPIRES NewsMode(UINT const mode);
  virtual LPCWSTR NewsCategory() const;
  virtual MTAPIRES NewsCategory(LPCWSTR category);
  virtual MTAPIRES NewsLangAdd(UINT const language);
  virtual MTAPIRES NewsLangUpdate(UINT const pos,UINT const language);
  virtual MTAPIRES NewsLangDelete(UINT const pos);
  virtual MTAPIRES NewsLangClear();
  virtual UINT NewsLangTotal() const;
  virtual UINT NewsLangNext(UINT const pos) const;
  virtual UINT MailMode() const;
  virtual MTAPIRES MailMode(UINT const mode);
  virtual UINT64 TradeFlags() const;
  virtual MTAPIRES TradeFlags(UINT64 const flags);
  virtual double TradeInterestrate() const;
  virtual MTAPIRES TradeInterestrate(double const rate);
  virtual double TradeVirtualCredit() const;
  virtual MTAPIRES TradeVirtualCredit(double const credit);
  virtual UINT MarginFreeMode() const;
  virtual MTAPIRES MarginFreeMode(UINT const freemode);
  virtual UINT MarginSOMode() const;
  virtual MTAPIRES MarginSOMode(UINT const level);
  virtual double MarginCall() const;
  virtual MTAPIRES MarginCall(double const level);
  virtual double MarginStopOut() const;
  virtual MTAPIRES MarginStopOut(double const level);
  virtual UINT DemoLeverage() const;
  virtual MTAPIRES DemoLeverage(UINT const leverage);
  virtual double DemoDeposit() const;
  virtual MTAPIRES DemoDeposit(double const deposit);
  virtual UINT LimitHistory() const;
  virtual MTAPIRES LimitHistory(UINT const limit);
  virtual UINT LimitOrders() const;
  virtual MTAPIRES LimitOrders(UINT const limit);
  virtual UINT LimitSymbols() const;
  virtual MTAPIRES LimitSymbols(UINT const limit);
  virtual MTAPIRES CommissionAdd(IMTConCommission *commission);
  virtual MTAPIRES CommissionUpdate(UINT const pos,IMTConCommission const *commission);
  virtual MTAPIRES CommissionDelete(UINT const pos);
  virtual MTAPIRES CommissionClear();
  virtual MTAPIRES CommissionShift(UINT const pos,int const shift);
  virtual UINT CommissionTotal() const;
  virtual MTAPIRES CommissionNext(UINT const pos,IMTConCommission *commission) const;
  virtual MTAPIRES CommissionGet(LPCWSTR name,IMTConCommission *commission) const;
  virtual MTAPIRES SymbolAdd(IMTConGroupSymbol *symbol);
  virtual MTAPIRES SymbolUpdate(UINT const pos,IMTConGroupSymbol const *symbol);
  virtual MTAPIRES SymbolDelete(UINT const pos);
  virtual MTAPIRES SymbolClear();
  virtual MTAPIRES SymbolShift(UINT const pos,int const shift);
  virtual UINT SymbolTotal() const;
  virtual MTAPIRES SymbolNext(UINT const pos,IMTConGroupSymbol *symbol) const;
  virtual MTAPIRES SymbolGet(LPCWSTR name,IMTConGroupSymbol *symbol) const;
  virtual UINT MarginFreeProfitMode() const;
  virtual MTAPIRES MarginFreeProfitMode(UINT const mode);
  virtual UINT MarginMode() const;
  virtual MTAPIRES MarginMode(UINT const mode);
  virtual UINT AuthOTPMode() const;
  virtual MTAPIRES AuthOTPMode(UINT const mode);
  virtual UINT TradeTransferMode() const;
  virtual MTAPIRES TradeTransferMode(UINT const mode);
  virtual UINT64 MarginFlags() const;
  virtual MTAPIRES MarginFlags(UINT64 const flags);
  virtual UINT LimitPositions() const;
  virtual MTAPIRES LimitPositions(UINT const limit);
  virtual MTAPIRES CurrencyDigitsSet(UINT const currency_digits);
  virtual LPCWSTR ReportsEmail() const;
  virtual MTAPIRES ReportsEmail(LPCWSTR email);
  virtual LPCWSTR CompanyDepositPage() const;
  virtual MTAPIRES CompanyDepositPage(LPCWSTR url);
  virtual LPCWSTR CompanyWithdrawalPage() const;
  virtual MTAPIRES CompanyWithdrawalPage(LPCWSTR url);
  virtual UINT DemoInactivityPeriod() const;
  virtual MTAPIRES DemoInactivityPeriod(UINT const period);
  virtual LPCWSTR MarginFloatingLeverage() const;
  virtual MTAPIRES MarginFloatingLeverage(LPCWSTR name);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTConGroupArray : public IMTConGroupArray
{
 public:
  SwigDirector_IMTConGroupArray(int swig_p);
  virtual void Release();
  virtual MTAPIRES Assign(IMTConGroupArray const *array);
  virtual MTAPIRES Clear();
  virtual MTAPIRES Add(IMTConGroup *record);
  virtual MTAPIRES AddCopy(IMTConGroup const *record);
  virtual MTAPIRES Add(IMTConGroupArray *array);
  virtual MTAPIRES AddCopy(IMTConGroupArray const *array);
  virtual MTAPIRES Delete(UINT const pos);
  virtual IMTConGroup *Detach(UINT const pos);
  virtual MTAPIRES Update(UINT const pos,IMTConGroup *record);
  virtual MTAPIRES UpdateCopy(UINT const pos,IMTConGroup const *record);
  virtual MTAPIRES Shift(UINT const pos,int const shift);
  virtual UINT Total() const;
  virtual IMTConGroup *Next(UINT const index) const;
  virtual MTAPIRES Sort(MTSortFunctionPtr sort_function);
  virtual int Search(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchGreatOrEq(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchGreater(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchLessOrEq(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchLess(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchLeft(void const *key,MTSortFunctionPtr sort_function) const;
  virtual int SearchRight(void const *key,MTSortFunctionPtr sort_function) const;
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTConGroupSink : public IMTConGroupSink
{
 public:
  SwigDirector_IMTConGroupSink(int swig_p);
  void _swig_upcall_OnGroupAdd(IMTConGroup const *arg0) {
    IMTConGroupSink::OnGroupAdd(arg0);
  }
  virtual void OnGroupAdd(IMTConGroup const *arg0);
  void _swig_upcall_OnGroupUpdate(IMTConGroup const *arg0) {
    IMTConGroupSink::OnGroupUpdate(arg0);
  }
  virtual void OnGroupUpdate(IMTConGroup const *arg0);
  void _swig_upcall_OnGroupDelete(IMTConGroup const *arg0) {
    IMTConGroupSink::OnGroupDelete(arg0);
  }
  virtual void OnGroupDelete(IMTConGroup const *arg0);
  void _swig_upcall_OnGroupSync() {
    IMTConGroupSink::OnGroupSync();
  }
  virtual void OnGroupSync();
  MTAPIRES _swig_upcall_HookGroupAdd(UINT64 const arg0,IMTConGroup *arg1) {
    return IMTConGroupSink::HookGroupAdd(arg0,arg1);
  }
  virtual MTAPIRES HookGroupAdd(UINT64 const arg0,IMTConGroup *arg1);
  MTAPIRES _swig_upcall_HookGroupUpdate(UINT64 const arg0,IMTConGroup const *arg1,IMTConGroup *arg2) {
    return IMTConGroupSink::HookGroupUpdate(arg0,arg1,arg2);
  }
  virtual MTAPIRES HookGroupUpdate(UINT64 const arg0,IMTConGroup const *arg1,IMTConGroup *arg2);
  MTAPIRES _swig_upcall_HookGroupDelete(UINT64 const arg0,IMTConGroup const *arg1) {
    return IMTConGroupSink::HookGroupDelete(arg0,arg1);
  }
  virtual MTAPIRES HookGroupDelete(UINT64 const arg0,IMTConGroup const *arg1);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_IMTTickSink : public IMTTickSink
{
 public:
  SwigDirector_IMTTickSink(int swig_p);
  void _swig_upcall_OnTickShort(LPCWSTR arg0,MTTickShort const &arg1) {
    IMTTickSink::OnTick(arg0,arg1);
  }
  virtual void OnTick(LPCWSTR arg0,MTTickShort const &arg1);
  void _swig_upcall_OnTickStatShort(MTTickStat const &arg0) {
    IMTTickSink::OnTickStat(arg0);
  }
  virtual void OnTickStat(MTTickStat const &arg0);
  MTAPIRES _swig_upcall_HookTick(int const arg0,MTTick &arg1) {
    return IMTTickSink::HookTick(arg0,arg1);
  }
  virtual MTAPIRES HookTick(int const arg0,MTTick &arg1);
  MTAPIRES _swig_upcall_HookTickStat(int const arg0,MTTickStat &arg1) {
    return IMTTickSink::HookTickStat(arg0,arg1);
  }
  virtual MTAPIRES HookTickStat(int const arg0,MTTickStat &arg1);
  void _swig_upcall_OnTickServer(int const arg0,MTTick const &arg1) {
    IMTTickSink::OnTick(arg0,arg1);
  }
  virtual void OnTick(int const arg0,MTTick const &arg1);
  void _swig_upcall_OnTickStatServer(int const arg0,MTTickStat const &arg1) {
    IMTTickSink::OnTickStat(arg0,arg1);
  }
  virtual void OnTickStat(int const arg0,MTTickStat const &arg1);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

#endif
